
CALC_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  000031c8  0000325c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  0080018e  0080018e  0000338a  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  0000338c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e59  00000000  00000000  000055d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00006429  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00006609  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000683b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000a6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000bad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <main>
      8a:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e3 59       	subi	r30, 0x93	; 147
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <Precedence>:
u8 Operation[60];
static u8 Postfix[100];


static u8 Precedence(u8 Operator)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <Precedence+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <Precedence+0x8>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	89 83       	std	Y+1, r24	; 0x01
	switch (Operator)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3c 83       	std	Y+4, r19	; 0x04
     f60:	2b 83       	std	Y+3, r18	; 0x03
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	8b 32       	cpi	r24, 0x2B	; 43
     f68:	91 05       	cpc	r25, r1
     f6a:	c1 f0       	breq	.+48     	; 0xf9c <Precedence+0x52>
     f6c:	2b 81       	ldd	r18, Y+3	; 0x03
     f6e:	3c 81       	ldd	r19, Y+4	; 0x04
     f70:	2c 32       	cpi	r18, 0x2C	; 44
     f72:	31 05       	cpc	r19, r1
     f74:	34 f4       	brge	.+12     	; 0xf82 <Precedence+0x38>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	8a 32       	cpi	r24, 0x2A	; 42
     f7c:	91 05       	cpc	r25, r1
     f7e:	59 f0       	breq	.+22     	; 0xf96 <Precedence+0x4c>
     f80:	10 c0       	rjmp	.+32     	; 0xfa2 <Precedence+0x58>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	2d 32       	cpi	r18, 0x2D	; 45
     f88:	31 05       	cpc	r19, r1
     f8a:	41 f0       	breq	.+16     	; 0xf9c <Precedence+0x52>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	8f 32       	cpi	r24, 0x2F	; 47
     f92:	91 05       	cpc	r25, r1
     f94:	31 f4       	brne	.+12     	; 0xfa2 <Precedence+0x58>
	{
	case '*' :
	case '/' : return 2;
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <Precedence+0x5a>
	case '+' :
	case '-' : return 1;
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	2a 83       	std	Y+2, r18	; 0x02
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <Precedence+0x5a>
	}
	return 0;
     fa2:	1a 82       	std	Y+2, r1	; 0x02
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <Calc>:
void Calc(u8 *Equ)
{
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	c9 59       	subi	r28, 0x99	; 153
     fc2:	d1 40       	sbci	r29, 0x01	; 1
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	fe 01       	movw	r30, r28
     fd0:	e8 56       	subi	r30, 0x68	; 104
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
	Stack_Float stack_t;
	Float_init(&stack_t);
     fd8:	ce 01       	movw	r24, r28
     fda:	06 96       	adiw	r24, 0x06	; 6
     fdc:	0e 94 14 0b 	call	0x1628	; 0x1628 <Float_init>
	int j = 0;
     fe0:	1d 82       	std	Y+5, r1	; 0x05
     fe2:	1c 82       	std	Y+4, r1	; 0x04
	int i = 0;
     fe4:	1b 82       	std	Y+3, r1	; 0x03
     fe6:	1a 82       	std	Y+2, r1	; 0x02
     fe8:	9b c0       	rjmp	.+310    	; 0x1120 <Calc+0x16c>
	while (Equ[j] != '\0')
	{
		u8 Current = Equ[j];
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	fe 01       	movw	r30, r28
     ff0:	e8 56       	subi	r30, 0x68	; 104
     ff2:	fe 4f       	sbci	r31, 0xFE	; 254
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	80 81       	ld	r24, Z
    1000:	89 83       	std	Y+1, r24	; 0x01
		if ((Current <= '9' && Current >= '0') || Current == '.' )
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	8a 33       	cpi	r24, 0x3A	; 58
    1006:	18 f4       	brcc	.+6      	; 0x100e <Calc+0x5a>
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	80 33       	cpi	r24, 0x30	; 48
    100c:	10 f5       	brcc	.+68     	; 0x1052 <Calc+0x9e>
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	8e 32       	cpi	r24, 0x2E	; 46
    1012:	09 f0       	breq	.+2      	; 0x1016 <Calc+0x62>
    1014:	4f c0       	rjmp	.+158    	; 0x10b4 <Calc+0x100>
    1016:	1d c0       	rjmp	.+58     	; 0x1052 <Calc+0x9e>
		{
			while ((Current <= '9' && Current >= '0') || Current == '.' )
			{
				Postfix[i++] = Current;
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	fc 01       	movw	r30, r24
    101e:	e2 57       	subi	r30, 0x72	; 114
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	9b 83       	std	Y+3, r25	; 0x03
    102e:	8a 83       	std	Y+2, r24	; 0x02
				Current = Equ[++j];
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	9d 83       	std	Y+5, r25	; 0x05
    1038:	8c 83       	std	Y+4, r24	; 0x04
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	fe 01       	movw	r30, r28
    1040:	e8 56       	subi	r30, 0x68	; 104
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	fc 01       	movw	r30, r24
    104a:	e2 0f       	add	r30, r18
    104c:	f3 1f       	adc	r31, r19
    104e:	80 81       	ld	r24, Z
    1050:	89 83       	std	Y+1, r24	; 0x01
	while (Equ[j] != '\0')
	{
		u8 Current = Equ[j];
		if ((Current <= '9' && Current >= '0') || Current == '.' )
		{
			while ((Current <= '9' && Current >= '0') || Current == '.' )
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	8a 33       	cpi	r24, 0x3A	; 58
    1056:	18 f4       	brcc	.+6      	; 0x105e <Calc+0xaa>
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	e8 f6       	brcc	.-70     	; 0x1018 <Calc+0x64>
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	8e 32       	cpi	r24, 0x2E	; 46
    1062:	d1 f2       	breq	.-76     	; 0x1018 <Calc+0x64>
			{
				Postfix[i++] = Current;
				Current = Equ[++j];
			}
			Postfix[i++] = ' ';
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	9b 81       	ldd	r25, Y+3	; 0x03
    1068:	fc 01       	movw	r30, r24
    106a:	e2 57       	subi	r30, 0x72	; 114
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	80 83       	st	Z, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	9b 83       	std	Y+3, r25	; 0x03
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	51 c0       	rjmp	.+162    	; 0x1120 <Calc+0x16c>
		}
		else
		{
			while(!(Float_isEmpty(&stack_t)) && Precedence(Current) <= Precedence(Float_Top(&stack_t)))
			{
				Postfix[i++] = Float_Top(&stack_t);
    107e:	0a 81       	ldd	r16, Y+2	; 0x02
    1080:	1b 81       	ldd	r17, Y+3	; 0x03
    1082:	ce 01       	movw	r24, r28
    1084:	06 96       	adiw	r24, 0x06	; 6
    1086:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	e2 57       	subi	r30, 0x72	; 114
    109e:	fe 4f       	sbci	r31, 0xFE	; 254
    10a0:	80 83       	st	Z, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	9b 81       	ldd	r25, Y+3	; 0x03
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	9b 83       	std	Y+3, r25	; 0x03
    10aa:	8a 83       	std	Y+2, r24	; 0x02
				Float_Pop(&stack_t);
    10ac:	ce 01       	movw	r24, r28
    10ae:	06 96       	adiw	r24, 0x06	; 6
    10b0:	0e 94 97 0b 	call	0x172e	; 0x172e <Float_Pop>
			}
			Postfix[i++] = ' ';
		}
		else
		{
			while(!(Float_isEmpty(&stack_t)) && Precedence(Current) <= Precedence(Float_Top(&stack_t)))
    10b4:	ce 01       	movw	r24, r28
    10b6:	06 96       	adiw	r24, 0x06	; 6
    10b8:	0e 94 27 0b 	call	0x164e	; 0x164e <Float_isEmpty>
    10bc:	88 23       	and	r24, r24
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <Calc+0x134>
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Precedence>
    10c6:	18 2f       	mov	r17, r24
    10c8:	ce 01       	movw	r24, r28
    10ca:	06 96       	adiw	r24, 0x06	; 6
    10cc:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <Precedence>
    10e4:	81 17       	cp	r24, r17
    10e6:	58 f6       	brcc	.-106    	; 0x107e <Calc+0xca>
			{
				Postfix[i++] = Float_Top(&stack_t);
				Float_Pop(&stack_t);
			}
			if (!Float_isFull(&stack_t))
    10e8:	ce 01       	movw	r24, r28
    10ea:	06 96       	adiw	r24, 0x06	; 6
    10ec:	0e 94 42 0b 	call	0x1684	; 0x1684 <Float_isFull>
    10f0:	88 23       	and	r24, r24
    10f2:	89 f4       	brne	.+34     	; 0x1116 <Calc+0x162>
			{
				Float_Push(&stack_t, Current);
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	ce 01       	movw	r24, r28
    110c:	06 96       	adiw	r24, 0x06	; 6
    110e:	ba 01       	movw	r22, r20
    1110:	a9 01       	movw	r20, r18
    1112:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Float_Push>
			}
			j++;
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	9d 81       	ldd	r25, Y+5	; 0x05
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	9d 83       	std	Y+5, r25	; 0x05
    111e:	8c 83       	std	Y+4, r24	; 0x04
{
	Stack_Float stack_t;
	Float_init(&stack_t);
	int j = 0;
	int i = 0;
	while (Equ[j] != '\0')
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	fe 01       	movw	r30, r28
    1126:	e8 56       	subi	r30, 0x68	; 104
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	fc 01       	movw	r30, r24
    1130:	e2 0f       	add	r30, r18
    1132:	f3 1f       	adc	r31, r19
    1134:	80 81       	ld	r24, Z
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <Calc+0x188>
    113a:	57 cf       	rjmp	.-338    	; 0xfea <Calc+0x36>
    113c:	1b c0       	rjmp	.+54     	; 0x1174 <Calc+0x1c0>
			j++;
		}
	}
	while (!Float_isEmpty(&stack_t))
	{
		Postfix[i++] = Float_Top(&stack_t);
    113e:	0a 81       	ldd	r16, Y+2	; 0x02
    1140:	1b 81       	ldd	r17, Y+3	; 0x03
    1142:	ce 01       	movw	r24, r28
    1144:	06 96       	adiw	r24, 0x06	; 6
    1146:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	bc 01       	movw	r22, r24
    1150:	cd 01       	movw	r24, r26
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	e2 57       	subi	r30, 0x72	; 114
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	80 83       	st	Z, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	9b 83       	std	Y+3, r25	; 0x03
    116a:	8a 83       	std	Y+2, r24	; 0x02
		Float_Pop(&stack_t);
    116c:	ce 01       	movw	r24, r28
    116e:	06 96       	adiw	r24, 0x06	; 6
    1170:	0e 94 97 0b 	call	0x172e	; 0x172e <Float_Pop>
				Float_Push(&stack_t, Current);
			}
			j++;
		}
	}
	while (!Float_isEmpty(&stack_t))
    1174:	ce 01       	movw	r24, r28
    1176:	06 96       	adiw	r24, 0x06	; 6
    1178:	0e 94 27 0b 	call	0x164e	; 0x164e <Float_isEmpty>
    117c:	88 23       	and	r24, r24
    117e:	f9 f2       	breq	.-66     	; 0x113e <Calc+0x18a>
	{
		Postfix[i++] = Float_Top(&stack_t);
		Float_Pop(&stack_t);
	}
	Postfix[i] = '\0';
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	fc 01       	movw	r30, r24
    1186:	e2 57       	subi	r30, 0x72	; 114
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	10 82       	st	Z, r1
	evaluate();
    118c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <evaluate>
}
    1190:	c7 56       	subi	r28, 0x67	; 103
    1192:	de 4f       	sbci	r29, 0xFE	; 254
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <evaluate>:

static void evaluate(void)
{
    11a8:	0f 93       	push	r16
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	c5 5b       	subi	r28, 0xB5	; 181
    11b4:	d1 40       	sbci	r29, 0x01	; 1
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
	Stack_Float stack_t;
	Float_init(&stack_t);
    11c0:	ce 01       	movw	r24, r28
    11c2:	83 96       	adiw	r24, 0x23	; 35
    11c4:	0e 94 14 0b 	call	0x1628	; 0x1628 <Float_init>

	int i = 0;
    11c8:	1a a2       	std	Y+34, r1	; 0x22
    11ca:	19 a2       	std	Y+33, r1	; 0x21
	u32 Num = 0;
    11cc:	1d 8e       	std	Y+29, r1	; 0x1d
    11ce:	1e 8e       	std	Y+30, r1	; 0x1e
    11d0:	1f 8e       	std	Y+31, r1	; 0x1f
    11d2:	18 a2       	std	Y+32, r1	; 0x20
	u8 Sympol = ' ';
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	8c 8f       	std	Y+28, r24	; 0x1c
	u8 Check = 1;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8b 8f       	std	Y+27, r24	; 0x1b
	u8 temp = 0;
    11dc:	1a 8e       	std	Y+26, r1	; 0x1a
	float Operand1, Operand2;
	float Res;
	float Float_Num = 0;
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	8a 87       	std	Y+10, r24	; 0x0a
    11e8:	9b 87       	std	Y+11, r25	; 0x0b
    11ea:	ac 87       	std	Y+12, r26	; 0x0c
    11ec:	bd 87       	std	Y+13, r27	; 0x0d
	u8 Flag_repeat = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	89 87       	std	Y+9, r24	; 0x09
	u8 Flag_Div_0 = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	88 87       	std	Y+8, r24	; 0x08
    11f6:	4b c1       	rjmp	.+662    	; 0x148e <evaluate+0x2e6>
	while (Postfix[i] != '\0')
	{
		u8 Current = Postfix[i];
    11f8:	89 a1       	ldd	r24, Y+33	; 0x21
    11fa:	9a a1       	ldd	r25, Y+34	; 0x22
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 57       	subi	r30, 0x72	; 114
    1200:	fe 4f       	sbci	r31, 0xFE	; 254
    1202:	80 81       	ld	r24, Z
    1204:	8f 83       	std	Y+7, r24	; 0x07

		if (Current <= '9' && Current >= '0')
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	8a 33       	cpi	r24, 0x3A	; 58
    120a:	08 f0       	brcs	.+2      	; 0x120e <evaluate+0x66>
    120c:	dc c0       	rjmp	.+440    	; 0x13c6 <evaluate+0x21e>
    120e:	8f 81       	ldd	r24, Y+7	; 0x07
    1210:	80 33       	cpi	r24, 0x30	; 48
    1212:	08 f4       	brcc	.+2      	; 0x1216 <evaluate+0x6e>
    1214:	d8 c0       	rjmp	.+432    	; 0x13c6 <evaluate+0x21e>
    1216:	2a c0       	rjmp	.+84     	; 0x126c <evaluate+0xc4>
		{
			while (Current <= '9' && Current >= '0')
			{
				Num = (Num * 10) + (int)(Current - '0');
    1218:	8d 8d       	ldd	r24, Y+29	; 0x1d
    121a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    121c:	af 8d       	ldd	r26, Y+31	; 0x1f
    121e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1220:	2a e0       	ldi	r18, 0x0A	; 10
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <__mulsi3>
    1230:	9b 01       	movw	r18, r22
    1232:	ac 01       	movw	r20, r24
    1234:	8f 81       	ldd	r24, Y+7	; 0x07
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	c0 97       	sbiw	r24, 0x30	; 48
    123c:	aa 27       	eor	r26, r26
    123e:	97 fd       	sbrc	r25, 7
    1240:	a0 95       	com	r26
    1242:	ba 2f       	mov	r27, r26
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	a4 1f       	adc	r26, r20
    124a:	b5 1f       	adc	r27, r21
    124c:	8d 8f       	std	Y+29, r24	; 0x1d
    124e:	9e 8f       	std	Y+30, r25	; 0x1e
    1250:	af 8f       	std	Y+31, r26	; 0x1f
    1252:	b8 a3       	std	Y+32, r27	; 0x20
				Current = Postfix[++i];
    1254:	89 a1       	ldd	r24, Y+33	; 0x21
    1256:	9a a1       	ldd	r25, Y+34	; 0x22
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	9a a3       	std	Y+34, r25	; 0x22
    125c:	89 a3       	std	Y+33, r24	; 0x21
    125e:	89 a1       	ldd	r24, Y+33	; 0x21
    1260:	9a a1       	ldd	r25, Y+34	; 0x22
    1262:	fc 01       	movw	r30, r24
    1264:	e2 57       	subi	r30, 0x72	; 114
    1266:	fe 4f       	sbci	r31, 0xFE	; 254
    1268:	80 81       	ld	r24, Z
    126a:	8f 83       	std	Y+7, r24	; 0x07
	{
		u8 Current = Postfix[i];

		if (Current <= '9' && Current >= '0')
		{
			while (Current <= '9' && Current >= '0')
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	8a 33       	cpi	r24, 0x3A	; 58
    1270:	18 f4       	brcc	.+6      	; 0x1278 <evaluate+0xd0>
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	80 33       	cpi	r24, 0x30	; 48
    1276:	80 f6       	brcc	.-96     	; 0x1218 <evaluate+0x70>
			{
				Num = (Num * 10) + (int)(Current - '0');
				Current = Postfix[++i];
			}
			if (Current == '.' && Flag_repeat == 1)
    1278:	8f 81       	ldd	r24, Y+7	; 0x07
    127a:	8e 32       	cpi	r24, 0x2E	; 46
    127c:	09 f0       	breq	.+2      	; 0x1280 <evaluate+0xd8>
    127e:	6c c0       	rjmp	.+216    	; 0x1358 <evaluate+0x1b0>
    1280:	89 85       	ldd	r24, Y+9	; 0x09
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	09 f0       	breq	.+2      	; 0x1288 <evaluate+0xe0>
    1286:	68 c0       	rjmp	.+208    	; 0x1358 <evaluate+0x1b0>
			{
				Current = Postfix[++i];
    1288:	89 a1       	ldd	r24, Y+33	; 0x21
    128a:	9a a1       	ldd	r25, Y+34	; 0x22
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	9a a3       	std	Y+34, r25	; 0x22
    1290:	89 a3       	std	Y+33, r24	; 0x21
    1292:	89 a1       	ldd	r24, Y+33	; 0x21
    1294:	9a a1       	ldd	r25, Y+34	; 0x22
    1296:	fc 01       	movw	r30, r24
    1298:	e2 57       	subi	r30, 0x72	; 114
    129a:	fe 4f       	sbci	r31, 0xFE	; 254
    129c:	80 81       	ld	r24, Z
    129e:	8f 83       	std	Y+7, r24	; 0x07
				if (temp != Check)
    12a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a4:	98 17       	cp	r25, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <evaluate+0x102>
    12a8:	55 c0       	rjmp	.+170    	; 0x1354 <evaluate+0x1ac>
				{
					float j = 0.1;
    12aa:	8d ec       	ldi	r24, 0xCD	; 205
    12ac:	9c ec       	ldi	r25, 0xCC	; 204
    12ae:	ac ec       	ldi	r26, 0xCC	; 204
    12b0:	bd e3       	ldi	r27, 0x3D	; 61
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	ad 83       	std	Y+5, r26	; 0x05
    12b8:	be 83       	std	Y+6, r27	; 0x06
    12ba:	42 c0       	rjmp	.+132    	; 0x1340 <evaluate+0x198>
					while (Current <= '9' && Current >= '0')
					{
						Float_Num +=  ((Current - '0') * j) ;
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	c0 97       	sbiw	r24, 0x30	; 48
    12c4:	aa 27       	eor	r26, r26
    12c6:	97 fd       	sbrc	r25, 7
    12c8:	a0 95       	com	r26
    12ca:	ba 2f       	mov	r27, r26
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	4d 81       	ldd	r20, Y+5	; 0x05
    12e2:	5e 81       	ldd	r21, Y+6	; 0x06
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9c 01       	movw	r18, r24
    12ee:	ad 01       	movw	r20, r26
    12f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    12f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    12f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8a 87       	std	Y+10, r24	; 0x0a
    1302:	9b 87       	std	Y+11, r25	; 0x0b
    1304:	ac 87       	std	Y+12, r26	; 0x0c
    1306:	bd 87       	std	Y+13, r27	; 0x0d
						Current = Postfix[++i];
    1308:	89 a1       	ldd	r24, Y+33	; 0x21
    130a:	9a a1       	ldd	r25, Y+34	; 0x22
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	9a a3       	std	Y+34, r25	; 0x22
    1310:	89 a3       	std	Y+33, r24	; 0x21
    1312:	89 a1       	ldd	r24, Y+33	; 0x21
    1314:	9a a1       	ldd	r25, Y+34	; 0x22
    1316:	fc 01       	movw	r30, r24
    1318:	e2 57       	subi	r30, 0x72	; 114
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	80 81       	ld	r24, Z
    131e:	8f 83       	std	Y+7, r24	; 0x07
						j *= 0.1;
    1320:	6b 81       	ldd	r22, Y+3	; 0x03
    1322:	7c 81       	ldd	r23, Y+4	; 0x04
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	2d ec       	ldi	r18, 0xCD	; 205
    132a:	3c ec       	ldi	r19, 0xCC	; 204
    132c:	4c ec       	ldi	r20, 0xCC	; 204
    132e:	5d e3       	ldi	r21, 0x3D	; 61
    1330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	9c 83       	std	Y+4, r25	; 0x04
    133c:	ad 83       	std	Y+5, r26	; 0x05
    133e:	be 83       	std	Y+6, r27	; 0x06
			{
				Current = Postfix[++i];
				if (temp != Check)
				{
					float j = 0.1;
					while (Current <= '9' && Current >= '0')
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	8a 33       	cpi	r24, 0x3A	; 58
    1344:	20 f4       	brcc	.+8      	; 0x134e <evaluate+0x1a6>
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	80 33       	cpi	r24, 0x30	; 48
    134a:	08 f0       	brcs	.+2      	; 0x134e <evaluate+0x1a6>
    134c:	b7 cf       	rjmp	.-146    	; 0x12bc <evaluate+0x114>
					{
						Float_Num +=  ((Current - '0') * j) ;
						Current = Postfix[++i];
						j *= 0.1;
					}
					temp = Check;
    134e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1350:	8a 8f       	std	Y+26, r24	; 0x1a
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <evaluate+0x1b0>
				}
				else {
					Flag_repeat = 0;
    1354:	19 86       	std	Y+9, r1	; 0x09
    1356:	a4 c0       	rjmp	.+328    	; 0x14a0 <evaluate+0x2f8>
					break;
				}
			}
			if (Current == ' ')
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	80 32       	cpi	r24, 0x20	; 32
    135c:	09 f0       	breq	.+2      	; 0x1360 <evaluate+0x1b8>
    135e:	97 c0       	rjmp	.+302    	; 0x148e <evaluate+0x2e6>
			{
				Float_Num += (float)Num;
    1360:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1362:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1364:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1366:	98 a1       	ldd	r25, Y+32	; 0x20
    1368:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    136c:	9b 01       	movw	r18, r22
    136e:	ac 01       	movw	r20, r24
    1370:	6a 85       	ldd	r22, Y+10	; 0x0a
    1372:	7b 85       	ldd	r23, Y+11	; 0x0b
    1374:	8c 85       	ldd	r24, Y+12	; 0x0c
    1376:	9d 85       	ldd	r25, Y+13	; 0x0d
    1378:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	8a 87       	std	Y+10, r24	; 0x0a
    1382:	9b 87       	std	Y+11, r25	; 0x0b
    1384:	ac 87       	std	Y+12, r26	; 0x0c
    1386:	bd 87       	std	Y+13, r27	; 0x0d
				Check++;
    1388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	8b 8f       	std	Y+27, r24	; 0x1b
				Float_Push(&stack_t, Float_Num);
    138e:	ce 01       	movw	r24, r28
    1390:	83 96       	adiw	r24, 0x23	; 35
    1392:	2a 85       	ldd	r18, Y+10	; 0x0a
    1394:	3b 85       	ldd	r19, Y+11	; 0x0b
    1396:	4c 85       	ldd	r20, Y+12	; 0x0c
    1398:	5d 85       	ldd	r21, Y+13	; 0x0d
    139a:	ba 01       	movw	r22, r20
    139c:	a9 01       	movw	r20, r18
    139e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Float_Push>
				Num = 0;
    13a2:	1d 8e       	std	Y+29, r1	; 0x1d
    13a4:	1e 8e       	std	Y+30, r1	; 0x1e
    13a6:	1f 8e       	std	Y+31, r1	; 0x1f
    13a8:	18 a2       	std	Y+32, r1	; 0x20
				Float_Num = 0;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	8a 87       	std	Y+10, r24	; 0x0a
    13b4:	9b 87       	std	Y+11, r25	; 0x0b
    13b6:	ac 87       	std	Y+12, r26	; 0x0c
    13b8:	bd 87       	std	Y+13, r27	; 0x0d
				i++;
    13ba:	89 a1       	ldd	r24, Y+33	; 0x21
    13bc:	9a a1       	ldd	r25, Y+34	; 0x22
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	9a a3       	std	Y+34, r25	; 0x22
    13c2:	89 a3       	std	Y+33, r24	; 0x21
    13c4:	64 c0       	rjmp	.+200    	; 0x148e <evaluate+0x2e6>
				continue;
			}
		}
		else
		{
			Sympol = Current;
    13c6:	8f 81       	ldd	r24, Y+7	; 0x07
    13c8:	8c 8f       	std	Y+28, r24	; 0x1c
			Operand2 = Float_Top(&stack_t);
    13ca:	ce 01       	movw	r24, r28
    13cc:	83 96       	adiw	r24, 0x23	; 35
    13ce:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	8a 8b       	std	Y+18, r24	; 0x12
    13d8:	9b 8b       	std	Y+19, r25	; 0x13
    13da:	ac 8b       	std	Y+20, r26	; 0x14
    13dc:	bd 8b       	std	Y+21, r27	; 0x15
			Float_Pop(&stack_t);
    13de:	ce 01       	movw	r24, r28
    13e0:	83 96       	adiw	r24, 0x23	; 35
    13e2:	0e 94 97 0b 	call	0x172e	; 0x172e <Float_Pop>
			Operand1 = Float_Top(&stack_t);
    13e6:	ce 01       	movw	r24, r28
    13e8:	83 96       	adiw	r24, 0x23	; 35
    13ea:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	8e 8b       	std	Y+22, r24	; 0x16
    13f4:	9f 8b       	std	Y+23, r25	; 0x17
    13f6:	a8 8f       	std	Y+24, r26	; 0x18
    13f8:	b9 8f       	std	Y+25, r27	; 0x19
			Float_Pop(&stack_t);
    13fa:	ce 01       	movw	r24, r28
    13fc:	83 96       	adiw	r24, 0x23	; 35
    13fe:	0e 94 97 0b 	call	0x172e	; 0x172e <Float_Pop>
			if (Sympol == '/' && Operand2 == 0)
    1402:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1404:	8f 32       	cpi	r24, 0x2F	; 47
    1406:	31 f5       	brne	.+76     	; 0x1454 <evaluate+0x2ac>
    1408:	cb 54       	subi	r28, 0x4B	; 75
    140a:	de 4f       	sbci	r29, 0xFE	; 254
    140c:	18 82       	st	Y, r1
    140e:	c5 5b       	subi	r28, 0xB5	; 181
    1410:	d1 40       	sbci	r29, 0x01	; 1
    1412:	6a 89       	ldd	r22, Y+18	; 0x12
    1414:	7b 89       	ldd	r23, Y+19	; 0x13
    1416:	8c 89       	ldd	r24, Y+20	; 0x14
    1418:	9d 89       	ldd	r25, Y+21	; 0x15
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1426:	88 23       	and	r24, r24
    1428:	31 f4       	brne	.+12     	; 0x1436 <evaluate+0x28e>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	cb 54       	subi	r28, 0x4B	; 75
    142e:	de 4f       	sbci	r29, 0xFE	; 254
    1430:	88 83       	st	Y, r24
    1432:	c5 5b       	subi	r28, 0xB5	; 181
    1434:	d1 40       	sbci	r29, 0x01	; 1
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	cb 54       	subi	r28, 0x4B	; 75
    143a:	de 4f       	sbci	r29, 0xFE	; 254
    143c:	98 81       	ld	r25, Y
    143e:	c5 5b       	subi	r28, 0xB5	; 181
    1440:	d1 40       	sbci	r29, 0x01	; 1
    1442:	89 27       	eor	r24, r25
    1444:	88 23       	and	r24, r24
    1446:	31 f4       	brne	.+12     	; 0x1454 <evaluate+0x2ac>
			{
				LCD_enuDisplayChar("X");
    1448:	80 e6       	ldi	r24, 0x60	; 96
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_enuDisplayChar>
				Flag_Div_0 = 0;
    1450:	18 86       	std	Y+8, r1	; 0x08
    1452:	1a c0       	rjmp	.+52     	; 0x1488 <evaluate+0x2e0>
			}
			else
			{
				Float_Push(&stack_t, Calc_res(Operand1, Operand2, Sympol));
    1454:	8e 89       	ldd	r24, Y+22	; 0x16
    1456:	9f 89       	ldd	r25, Y+23	; 0x17
    1458:	a8 8d       	ldd	r26, Y+24	; 0x18
    145a:	b9 8d       	ldd	r27, Y+25	; 0x19
    145c:	2a 89       	ldd	r18, Y+18	; 0x12
    145e:	3b 89       	ldd	r19, Y+19	; 0x13
    1460:	4c 89       	ldd	r20, Y+20	; 0x14
    1462:	5d 89       	ldd	r21, Y+21	; 0x15
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	0c 8d       	ldd	r16, Y+28	; 0x1c
    146a:	0e 94 85 0a 	call	0x150a	; 0x150a <Calc_res>
    146e:	9b 01       	movw	r18, r22
    1470:	ac 01       	movw	r20, r24
    1472:	ce 01       	movw	r24, r28
    1474:	83 96       	adiw	r24, 0x23	; 35
    1476:	ba 01       	movw	r22, r20
    1478:	a9 01       	movw	r20, r18
    147a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Float_Push>
				i++;
    147e:	89 a1       	ldd	r24, Y+33	; 0x21
    1480:	9a a1       	ldd	r25, Y+34	; 0x22
    1482:	01 96       	adiw	r24, 0x01	; 1
    1484:	9a a3       	std	Y+34, r25	; 0x22
    1486:	89 a3       	std	Y+33, r24	; 0x21
			}
			if (!Flag_Div_0) break;
    1488:	88 85       	ldd	r24, Y+8	; 0x08
    148a:	88 23       	and	r24, r24
    148c:	49 f0       	breq	.+18     	; 0x14a0 <evaluate+0x2f8>
	float Operand1, Operand2;
	float Res;
	float Float_Num = 0;
	u8 Flag_repeat = 1;
	u8 Flag_Div_0 = 1;
	while (Postfix[i] != '\0')
    148e:	89 a1       	ldd	r24, Y+33	; 0x21
    1490:	9a a1       	ldd	r25, Y+34	; 0x22
    1492:	fc 01       	movw	r30, r24
    1494:	e2 57       	subi	r30, 0x72	; 114
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	80 81       	ld	r24, Z
    149a:	88 23       	and	r24, r24
    149c:	09 f0       	breq	.+2      	; 0x14a0 <evaluate+0x2f8>
    149e:	ac ce       	rjmp	.-680    	; 0x11f8 <evaluate+0x50>
				i++;
			}
			if (!Flag_Div_0) break;
		}
	}
	if (Flag_Div_0 && Flag_repeat)
    14a0:	88 85       	ldd	r24, Y+8	; 0x08
    14a2:	88 23       	and	r24, r24
    14a4:	39 f1       	breq	.+78     	; 0x14f4 <evaluate+0x34c>
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	88 23       	and	r24, r24
    14aa:	21 f1       	breq	.+72     	; 0x14f4 <evaluate+0x34c>
	{
		Res = Float_Top(&stack_t);
    14ac:	ce 01       	movw	r24, r28
    14ae:	83 96       	adiw	r24, 0x23	; 35
    14b0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Float_Top>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8e 87       	std	Y+14, r24	; 0x0e
    14ba:	9f 87       	std	Y+15, r25	; 0x0f
    14bc:	a8 8b       	std	Y+16, r26	; 0x10
    14be:	b9 8b       	std	Y+17, r27	; 0x11
		Float_Pop(&stack_t);
    14c0:	ce 01       	movw	r24, r28
    14c2:	83 96       	adiw	r24, 0x23	; 35
    14c4:	0e 94 97 0b 	call	0x172e	; 0x172e <Float_Pop>
		int length = Get_Length(Res);
    14c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    14cc:	a8 89       	ldd	r26, Y+16	; 0x10
    14ce:	b9 89       	ldd	r27, Y+17	; 0x11
    14d0:	bc 01       	movw	r22, r24
    14d2:	cd 01       	movw	r24, r26
    14d4:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <Get_Length>
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	89 83       	std	Y+1, r24	; 0x01
		LCD_enuDisplayChar(Res);
    14e0:	6e 85       	ldd	r22, Y+14	; 0x0e
    14e2:	7f 85       	ldd	r23, Y+15	; 0x0f
    14e4:	88 89       	ldd	r24, Y+16	; 0x10
    14e6:	99 89       	ldd	r25, Y+17	; 0x11
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	0e 94 67 13 	call	0x26ce	; 0x26ce <LCD_enuDisplayChar>
	}
}
    14f4:	cb 54       	subi	r28, 0x4B	; 75
    14f6:	de 4f       	sbci	r29, 0xFE	; 254
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <Calc_res>:

static float Calc_res(float Num1, float Num2, u8 sympol)
{
    150a:	0f 93       	push	r16
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	63 97       	sbiw	r28, 0x13	; 19
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	69 83       	std	Y+1, r22	; 0x01
    1522:	7a 83       	std	Y+2, r23	; 0x02
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	2d 83       	std	Y+5, r18	; 0x05
    152a:	3e 83       	std	Y+6, r19	; 0x06
    152c:	4f 83       	std	Y+7, r20	; 0x07
    152e:	58 87       	std	Y+8, r21	; 0x08
    1530:	09 87       	std	Y+9, r16	; 0x09
	switch(sympol)
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3f 87       	std	Y+15, r19	; 0x0f
    153a:	2e 87       	std	Y+14, r18	; 0x0e
    153c:	8e 85       	ldd	r24, Y+14	; 0x0e
    153e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1540:	8b 32       	cpi	r24, 0x2B	; 43
    1542:	91 05       	cpc	r25, r1
    1544:	b1 f0       	breq	.+44     	; 0x1572 <Calc_res+0x68>
    1546:	ae 85       	ldd	r26, Y+14	; 0x0e
    1548:	bf 85       	ldd	r27, Y+15	; 0x0f
    154a:	ac 32       	cpi	r26, 0x2C	; 44
    154c:	b1 05       	cpc	r27, r1
    154e:	34 f4       	brge	.+12     	; 0x155c <Calc_res+0x52>
    1550:	2e 85       	ldd	r18, Y+14	; 0x0e
    1552:	3f 85       	ldd	r19, Y+15	; 0x0f
    1554:	2a 32       	cpi	r18, 0x2A	; 42
    1556:	31 05       	cpc	r19, r1
    1558:	71 f1       	breq	.+92     	; 0x15b6 <Calc_res+0xac>
    155a:	4f c0       	rjmp	.+158    	; 0x15fa <Calc_res+0xf0>
    155c:	8e 85       	ldd	r24, Y+14	; 0x0e
    155e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1560:	8d 32       	cpi	r24, 0x2D	; 45
    1562:	91 05       	cpc	r25, r1
    1564:	b9 f0       	breq	.+46     	; 0x1594 <Calc_res+0x8a>
    1566:	ae 85       	ldd	r26, Y+14	; 0x0e
    1568:	bf 85       	ldd	r27, Y+15	; 0x0f
    156a:	af 32       	cpi	r26, 0x2F	; 47
    156c:	b1 05       	cpc	r27, r1
    156e:	a1 f1       	breq	.+104    	; 0x15d8 <Calc_res+0xce>
    1570:	44 c0       	rjmp	.+136    	; 0x15fa <Calc_res+0xf0>
	{
	case '+':
		return Num1 + Num2;
    1572:	69 81       	ldd	r22, Y+1	; 0x01
    1574:	7a 81       	ldd	r23, Y+2	; 0x02
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	4f 81       	ldd	r20, Y+7	; 0x07
    1580:	58 85       	ldd	r21, Y+8	; 0x08
    1582:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8a 87       	std	Y+10, r24	; 0x0a
    158c:	9b 87       	std	Y+11, r25	; 0x0b
    158e:	ac 87       	std	Y+12, r26	; 0x0c
    1590:	bd 87       	std	Y+13, r27	; 0x0d
    1592:	34 c0       	rjmp	.+104    	; 0x15fc <Calc_res+0xf2>
		break;
	case '-':
		return Num1 - Num2;
    1594:	69 81       	ldd	r22, Y+1	; 0x01
    1596:	7a 81       	ldd	r23, Y+2	; 0x02
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	2d 81       	ldd	r18, Y+5	; 0x05
    159e:	3e 81       	ldd	r19, Y+6	; 0x06
    15a0:	4f 81       	ldd	r20, Y+7	; 0x07
    15a2:	58 85       	ldd	r21, Y+8	; 0x08
    15a4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8a 87       	std	Y+10, r24	; 0x0a
    15ae:	9b 87       	std	Y+11, r25	; 0x0b
    15b0:	ac 87       	std	Y+12, r26	; 0x0c
    15b2:	bd 87       	std	Y+13, r27	; 0x0d
    15b4:	23 c0       	rjmp	.+70     	; 0x15fc <Calc_res+0xf2>
		break;
	case '*':
		return Num1 * Num2;
    15b6:	69 81       	ldd	r22, Y+1	; 0x01
    15b8:	7a 81       	ldd	r23, Y+2	; 0x02
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	2d 81       	ldd	r18, Y+5	; 0x05
    15c0:	3e 81       	ldd	r19, Y+6	; 0x06
    15c2:	4f 81       	ldd	r20, Y+7	; 0x07
    15c4:	58 85       	ldd	r21, Y+8	; 0x08
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8a 87       	std	Y+10, r24	; 0x0a
    15d0:	9b 87       	std	Y+11, r25	; 0x0b
    15d2:	ac 87       	std	Y+12, r26	; 0x0c
    15d4:	bd 87       	std	Y+13, r27	; 0x0d
    15d6:	12 c0       	rjmp	.+36     	; 0x15fc <Calc_res+0xf2>
		break;
	case '/':
		return Num1 / Num2;
    15d8:	69 81       	ldd	r22, Y+1	; 0x01
    15da:	7a 81       	ldd	r23, Y+2	; 0x02
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	2d 81       	ldd	r18, Y+5	; 0x05
    15e2:	3e 81       	ldd	r19, Y+6	; 0x06
    15e4:	4f 81       	ldd	r20, Y+7	; 0x07
    15e6:	58 85       	ldd	r21, Y+8	; 0x08
    15e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8a 87       	std	Y+10, r24	; 0x0a
    15f2:	9b 87       	std	Y+11, r25	; 0x0b
    15f4:	ac 87       	std	Y+12, r26	; 0x0c
    15f6:	bd 87       	std	Y+13, r27	; 0x0d
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <Calc_res+0xf2>
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <Calc_res+0x102>
	default : break;
	}
}
    15fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1600:	ac 85       	ldd	r26, Y+12	; 0x0c
    1602:	bd 85       	ldd	r27, Y+13	; 0x0d
    1604:	88 8b       	std	Y+16, r24	; 0x10
    1606:	99 8b       	std	Y+17, r25	; 0x11
    1608:	aa 8b       	std	Y+18, r26	; 0x12
    160a:	bb 8b       	std	Y+19, r27	; 0x13
    160c:	68 89       	ldd	r22, Y+16	; 0x10
    160e:	79 89       	ldd	r23, Y+17	; 0x11
    1610:	8a 89       	ldd	r24, Y+18	; 0x12
    1612:	9b 89       	ldd	r25, Y+19	; 0x13
    1614:	63 96       	adiw	r28, 0x13	; 19
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <Float_init>:

static void Float_init(Stack_Float *List)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <Float_init+0x6>
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
	List->Top = 0;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	fc 01       	movw	r30, r24
    163c:	e0 57       	subi	r30, 0x70	; 112
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	11 82       	std	Z+1, r1	; 0x01
    1642:	10 82       	st	Z, r1
}
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <Float_isEmpty>:

static u8 Float_isEmpty (Stack_Float *List)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <Float_isEmpty+0x6>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	return List->Top == 0;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	9a 81       	ldd	r25, Y+2	; 0x02
    1662:	fc 01       	movw	r30, r24
    1664:	e0 57       	subi	r30, 0x70	; 112
    1666:	fe 4f       	sbci	r31, 0xFE	; 254
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	1b 82       	std	Y+3, r1	; 0x03
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	11 f4       	brne	.+4      	; 0x1676 <Float_isEmpty+0x28>
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <Float_isFull>:

static u8 Float_isFull (Stack_Float *List)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <Float_isFull+0x6>
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
	return List->Top >= MAX;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	fc 01       	movw	r30, r24
    169a:	e0 57       	subi	r30, 0x70	; 112
    169c:	fe 4f       	sbci	r31, 0xFE	; 254
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	1b 82       	std	Y+3, r1	; 0x03
    16a4:	84 36       	cpi	r24, 0x64	; 100
    16a6:	91 05       	cpc	r25, r1
    16a8:	14 f0       	brlt	.+4      	; 0x16ae <Float_isFull+0x2a>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Float_Push>:

static void Float_Push(Stack_Float * List, float Data)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <Float_Push+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <Float_Push+0x8>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <Float_Push+0xa>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	9a 83       	std	Y+2, r25	; 0x02
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	4b 83       	std	Y+3, r20	; 0x03
    16d0:	5c 83       	std	Y+4, r21	; 0x04
    16d2:	6d 83       	std	Y+5, r22	; 0x05
    16d4:	7e 83       	std	Y+6, r23	; 0x06
	List->Data[(List->Top)++] = Data;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	fc 01       	movw	r30, r24
    16dc:	e0 57       	subi	r30, 0x70	; 112
    16de:	fe 4f       	sbci	r31, 0xFE	; 254
    16e0:	40 81       	ld	r20, Z
    16e2:	51 81       	ldd	r21, Z+1	; 0x01
    16e4:	29 81       	ldd	r18, Y+1	; 0x01
    16e6:	3a 81       	ldd	r19, Y+2	; 0x02
    16e8:	ca 01       	movw	r24, r20
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	f9 01       	movw	r30, r18
    16f4:	e8 0f       	add	r30, r24
    16f6:	f9 1f       	adc	r31, r25
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	ad 81       	ldd	r26, Y+5	; 0x05
    16fe:	be 81       	ldd	r27, Y+6	; 0x06
    1700:	80 83       	st	Z, r24
    1702:	91 83       	std	Z+1, r25	; 0x01
    1704:	a2 83       	std	Z+2, r26	; 0x02
    1706:	b3 83       	std	Z+3, r27	; 0x03
    1708:	9a 01       	movw	r18, r20
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	fc 01       	movw	r30, r24
    1714:	e0 57       	subi	r30, 0x70	; 112
    1716:	fe 4f       	sbci	r31, 0xFE	; 254
    1718:	31 83       	std	Z+1, r19	; 0x01
    171a:	20 83       	st	Z, r18
}
    171c:	26 96       	adiw	r28, 0x06	; 6
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <Float_Pop>:

static void Float_Pop(Stack_Float * List)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <Float_Pop+0x6>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
	(List->Top)--;
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	e0 57       	subi	r30, 0x70	; 112
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	80 81       	ld	r24, Z
    1748:	91 81       	ldd	r25, Z+1	; 0x01
    174a:	9c 01       	movw	r18, r24
    174c:	21 50       	subi	r18, 0x01	; 1
    174e:	30 40       	sbci	r19, 0x00	; 0
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	fc 01       	movw	r30, r24
    1756:	e0 57       	subi	r30, 0x70	; 112
    1758:	fe 4f       	sbci	r31, 0xFE	; 254
    175a:	31 83       	std	Z+1, r19	; 0x01
    175c:	20 83       	st	Z, r18
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <Float_Top>:

static float Float_Top(Stack_Float *List)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	00 d0       	rcall	.+0      	; 0x176e <Float_Top+0x6>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
	return (List->Data[List->Top - 1]);
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	fc 01       	movw	r30, r24
    177c:	e0 57       	subi	r30, 0x70	; 112
    177e:	fe 4f       	sbci	r31, 0xFE	; 254
    1780:	80 81       	ld	r24, Z
    1782:	91 81       	ldd	r25, Z+1	; 0x01
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	29 81       	ldd	r18, Y+1	; 0x01
    1788:	3a 81       	ldd	r19, Y+2	; 0x02
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	f9 01       	movw	r30, r18
    1794:	e8 0f       	add	r30, r24
    1796:	f9 1f       	adc	r31, r25
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	a2 81       	ldd	r26, Z+2	; 0x02
    179e:	b3 81       	ldd	r27, Z+3	; 0x03
}
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <Get_Length>:
static u8 Get_Length(float Number)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	63 97       	sbiw	r28, 0x13	; 19
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	6e 87       	std	Y+14, r22	; 0x0e
    17c4:	7f 87       	std	Y+15, r23	; 0x0f
    17c6:	88 8b       	std	Y+16, r24	; 0x10
    17c8:	99 8b       	std	Y+17, r25	; 0x11
	u8 str[10] = {0};
    17ca:	8a e0       	ldi	r24, 0x0A	; 10
    17cc:	fe 01       	movw	r30, r28
    17ce:	33 96       	adiw	r30, 0x03	; 3
    17d0:	df 01       	movw	r26, r30
    17d2:	98 2f       	mov	r25, r24
    17d4:	1d 92       	st	X+, r1
    17d6:	9a 95       	dec	r25
    17d8:	e9 f7       	brne	.-6      	; 0x17d4 <Get_Length+0x26>
	int Decimal;
	Decimal = (int)Number;
    17da:	6e 85       	ldd	r22, Y+14	; 0x0e
    17dc:	7f 85       	ldd	r23, Y+15	; 0x0f
    17de:	88 89       	ldd	r24, Y+16	; 0x10
    17e0:	99 89       	ldd	r25, Y+17	; 0x11
    17e2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
	sprintf(str, "%d", Decimal);
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <Get_Length+0x42>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <Get_Length+0x44>
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <Get_Length+0x46>
    17f4:	ed b7       	in	r30, 0x3d	; 61
    17f6:	fe b7       	in	r31, 0x3e	; 62
    17f8:	31 96       	adiw	r30, 0x01	; 1
    17fa:	ce 01       	movw	r24, r28
    17fc:	03 96       	adiw	r24, 0x03	; 3
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	82 e6       	ldi	r24, 0x62	; 98
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	93 83       	std	Z+3, r25	; 0x03
    1808:	82 83       	std	Z+2, r24	; 0x02
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	9a 81       	ldd	r25, Y+2	; 0x02
    180e:	95 83       	std	Z+5, r25	; 0x05
    1810:	84 83       	std	Z+4, r24	; 0x04
    1812:	0e 94 41 16 	call	0x2c82	; 0x2c82 <sprintf>
    1816:	ad b7       	in	r26, 0x3d	; 61
    1818:	be b7       	in	r27, 0x3e	; 62
    181a:	16 96       	adiw	r26, 0x06	; 6
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	be bf       	out	0x3e, r27	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	ad bf       	out	0x3d, r26	; 61
	volatile u8 length = 0;
    1826:	1d 86       	std	Y+13, r1	; 0x0d
	while(str[length++] != '\0');
    1828:	bd 85       	ldd	r27, Y+13	; 0x0d
    182a:	ba 8b       	std	Y+18, r27	; 0x12
    182c:	8a 89       	ldd	r24, Y+18	; 0x12
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	ce 01       	movw	r24, r28
    1834:	03 96       	adiw	r24, 0x03	; 3
    1836:	fc 01       	movw	r30, r24
    1838:	e2 0f       	add	r30, r18
    183a:	f3 1f       	adc	r31, r19
    183c:	80 81       	ld	r24, Z
    183e:	8b 8b       	std	Y+19, r24	; 0x13
    1840:	9b 89       	ldd	r25, Y+19	; 0x13
    1842:	99 23       	and	r25, r25
    1844:	11 f0       	breq	.+4      	; 0x184a <Get_Length+0x9c>
    1846:	a1 e0       	ldi	r26, 0x01	; 1
    1848:	ab 8b       	std	Y+19, r26	; 0x13
    184a:	9b 89       	ldd	r25, Y+19	; 0x13
    184c:	8a 89       	ldd	r24, Y+18	; 0x12
    184e:	8f 5f       	subi	r24, 0xFF	; 255
    1850:	8d 87       	std	Y+13, r24	; 0x0d
    1852:	99 23       	and	r25, r25
    1854:	49 f7       	brne	.-46     	; 0x1828 <Get_Length+0x7a>
	return length;
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1858:	63 96       	adiw	r28, 0x13	; 19
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	0f 92       	push	r0
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
    1874:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1876:	ea e3       	ldi	r30, 0x3A	; 58
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8f ef       	ldi	r24, 0xFF	; 255
    187c:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    187e:	e7 e3       	ldi	r30, 0x37	; 55
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1886:	e4 e3       	ldi	r30, 0x34	; 52
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 ef       	ldi	r24, 0xF0	; 240
    188c:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    188e:	e1 e3       	ldi	r30, 0x31	; 49
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    189c:	e8 e3       	ldi	r30, 0x38	; 56
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    18a2:	e5 e3       	ldi	r30, 0x35	; 53
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	80 83       	st	Z, r24
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    18aa:	e2 e3       	ldi	r30, 0x32	; 50
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <DIO_enuSetPortDirection+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <DIO_enuSetPortDirection+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    18d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	a8 f5       	brcc	.+106    	; 0x1942 <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3d 83       	std	Y+5, r19	; 0x05
    18e0:	2c 83       	std	Y+4, r18	; 0x04
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	d1 f0       	breq	.+52     	; 0x1920 <DIO_enuSetPortDirection+0x62>
    18ec:	2c 81       	ldd	r18, Y+4	; 0x04
    18ee:	3d 81       	ldd	r19, Y+5	; 0x05
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	2c f4       	brge	.+10     	; 0x1900 <DIO_enuSetPortDirection+0x42>
    18f6:	8c 81       	ldd	r24, Y+4	; 0x04
    18f8:	9d 81       	ldd	r25, Y+5	; 0x05
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	61 f0       	breq	.+24     	; 0x1916 <DIO_enuSetPortDirection+0x58>
    18fe:	1e c0       	rjmp	.+60     	; 0x193c <DIO_enuSetPortDirection+0x7e>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	81 f0       	breq	.+32     	; 0x192a <DIO_enuSetPortDirection+0x6c>
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	91 05       	cpc	r25, r1
    1912:	81 f0       	breq	.+32     	; 0x1934 <DIO_enuSetPortDirection+0x76>
    1914:	13 c0       	rjmp	.+38     	; 0x193c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1916:	ea e3       	ldi	r30, 0x3A	; 58
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	80 83       	st	Z, r24
    191e:	0e c0       	rjmp	.+28     	; 0x193c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	80 83       	st	Z, r24
    1928:	09 c0       	rjmp	.+18     	; 0x193c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    192a:	e4 e3       	ldi	r30, 0x34	; 52
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 83       	st	Z, r24
    1932:	04 c0       	rjmp	.+8      	; 0x193c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1934:	e1 e3       	ldi	r30, 0x31	; 49
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <DIO_enuSetPortValue+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <DIO_enuSetPortValue+0x8>
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    196a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	a8 f5       	brcc	.+106    	; 0x19dc <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3d 83       	std	Y+5, r19	; 0x05
    197a:	2c 83       	std	Y+4, r18	; 0x04
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d1 f0       	breq	.+52     	; 0x19ba <DIO_enuSetPortValue+0x62>
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	3d 81       	ldd	r19, Y+5	; 0x05
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <DIO_enuSetPortValue+0x42>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <DIO_enuSetPortValue+0x58>
    1998:	1e c0       	rjmp	.+60     	; 0x19d6 <DIO_enuSetPortValue+0x7e>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <DIO_enuSetPortValue+0x6c>
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	81 f0       	breq	.+32     	; 0x19ce <DIO_enuSetPortValue+0x76>
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	80 83       	st	Z, r24
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	80 83       	st	Z, r24
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	80 83       	st	Z, r24
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <DIO_enuTogPort+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <DIO_enuTogPort+0x8>
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1a00:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <DIO_enuTogPort+0x18>
    1a08:	41 c0       	rjmp	.+130    	; 0x1a8c <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	e9 f0       	breq	.+58     	; 0x1a58 <DIO_enuTogPort+0x66>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <DIO_enuTogPort+0x40>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <DIO_enuTogPort+0x56>
    1a30:	2a c0       	rjmp	.+84     	; 0x1a86 <DIO_enuTogPort+0x94>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	b1 f0       	breq	.+44     	; 0x1a68 <DIO_enuTogPort+0x76>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	c9 f0       	breq	.+50     	; 0x1a78 <DIO_enuTogPort+0x86>
    1a46:	1f c0       	rjmp	.+62     	; 0x1a86 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 95       	com	r24
    1a54:	8c 93       	st	X, r24
    1a56:	17 c0       	rjmp	.+46     	; 0x1a86 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    1a58:	a8 e3       	ldi	r26, 0x38	; 56
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e8 e3       	ldi	r30, 0x38	; 56
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 95       	com	r24
    1a64:	8c 93       	st	X, r24
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    1a68:	a5 e3       	ldi	r26, 0x35	; 53
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e3       	ldi	r30, 0x35	; 53
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	80 95       	com	r24
    1a74:	8c 93       	st	X, r24
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1a78:	a2 e3       	ldi	r26, 0x32	; 50
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e2 e3       	ldi	r30, 0x32	; 50
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 95       	com	r24
    1a84:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <DIO_enuGetPortValue+0x6>
    1aa6:	00 d0       	rcall	.+0      	; 0x1aa8 <DIO_enuGetPortValue+0x8>
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <DIO_enuGetPortValue+0xa>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	7c 83       	std	Y+4, r23	; 0x04
    1ab2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <DIO_enuGetPortValue+0x20>
    1abe:	43 c0       	rjmp	.+134    	; 0x1b46 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	e8 f5       	brcc	.+122    	; 0x1b40 <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	28 2f       	mov	r18, r24
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	3e 83       	std	Y+6, r19	; 0x06
    1ace:	2d 83       	std	Y+5, r18	; 0x05
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	e1 f0       	breq	.+56     	; 0x1b12 <DIO_enuGetPortValue+0x72>
    1ada:	2d 81       	ldd	r18, Y+5	; 0x05
    1adc:	3e 81       	ldd	r19, Y+6	; 0x06
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	2c f4       	brge	.+10     	; 0x1aee <DIO_enuGetPortValue+0x4e>
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <DIO_enuGetPortValue+0x64>
    1aec:	26 c0       	rjmp	.+76     	; 0x1b3a <DIO_enuGetPortValue+0x9a>
    1aee:	2d 81       	ldd	r18, Y+5	; 0x05
    1af0:	3e 81       	ldd	r19, Y+6	; 0x06
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	a1 f0       	breq	.+40     	; 0x1b20 <DIO_enuGetPortValue+0x80>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	b1 f0       	breq	.+44     	; 0x1b2e <DIO_enuGetPortValue+0x8e>
    1b02:	1b c0       	rjmp	.+54     	; 0x1b3a <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
    1b04:	e9 e3       	ldi	r30, 0x39	; 57
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	80 83       	st	Z, r24
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1b1c:	80 83       	st	Z, r24
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
    1b20:	e3 e3       	ldi	r30, 0x33	; 51
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	eb 81       	ldd	r30, Y+3	; 0x03
    1b28:	fc 81       	ldd	r31, Y+4	; 0x04
    1b2a:	80 83       	st	Z, r24
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
    1b2e:	e0 e3       	ldi	r30, 0x30	; 48
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	eb 81       	ldd	r30, Y+3	; 0x03
    1b36:	fc 81       	ldd	r31, Y+4	; 0x04
    1b38:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4c:	26 96       	adiw	r28, 0x06	; 6
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <DIO_enuSetPinDirection+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <DIO_enuSetPinDirection+0x8>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <DIO_enuSetPinDirection+0xa>
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	6b 83       	std	Y+3, r22	; 0x03
    1b70:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1b72:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	84 30       	cpi	r24, 0x04	; 4
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <DIO_enuSetPinDirection+0x1e>
    1b7a:	d1 c0       	rjmp	.+418    	; 0x1d1e <DIO_enuSetPinDirection+0x1c0>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	88 30       	cpi	r24, 0x08	; 8
    1b80:	08 f0       	brcs	.+2      	; 0x1b84 <DIO_enuSetPinDirection+0x26>
    1b82:	cd c0       	rjmp	.+410    	; 0x1d1e <DIO_enuSetPinDirection+0x1c0>
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	82 30       	cpi	r24, 0x02	; 2
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <DIO_enuSetPinDirection+0x2e>
    1b8a:	c9 c0       	rjmp	.+402    	; 0x1d1e <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3e 83       	std	Y+6, r19	; 0x06
    1b94:	2d 83       	std	Y+5, r18	; 0x05
    1b96:	6d 81       	ldd	r22, Y+5	; 0x05
    1b98:	7e 81       	ldd	r23, Y+6	; 0x06
    1b9a:	61 30       	cpi	r22, 0x01	; 1
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <DIO_enuSetPinDirection+0x44>
    1ba0:	41 c0       	rjmp	.+130    	; 0x1c24 <DIO_enuSetPinDirection+0xc6>
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba6:	82 30       	cpi	r24, 0x02	; 2
    1ba8:	91 05       	cpc	r25, r1
    1baa:	34 f4       	brge	.+12     	; 0x1bb8 <DIO_enuSetPinDirection+0x5a>
    1bac:	2d 81       	ldd	r18, Y+5	; 0x05
    1bae:	3e 81       	ldd	r19, Y+6	; 0x06
    1bb0:	21 15       	cp	r18, r1
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	71 f0       	breq	.+28     	; 0x1bd2 <DIO_enuSetPinDirection+0x74>
    1bb6:	b0 c0       	rjmp	.+352    	; 0x1d18 <DIO_enuSetPinDirection+0x1ba>
    1bb8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bba:	7e 81       	ldd	r23, Y+6	; 0x06
    1bbc:	62 30       	cpi	r22, 0x02	; 2
    1bbe:	71 05       	cpc	r23, r1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <DIO_enuSetPinDirection+0x66>
    1bc2:	59 c0       	rjmp	.+178    	; 0x1c76 <DIO_enuSetPinDirection+0x118>
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <DIO_enuSetPinDirection+0x72>
    1bce:	7c c0       	rjmp	.+248    	; 0x1cc8 <DIO_enuSetPinDirection+0x16a>
    1bd0:	a3 c0       	rjmp	.+326    	; 0x1d18 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1bd2:	aa e3       	ldi	r26, 0x3A	; 58
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	ea e3       	ldi	r30, 0x3A	; 58
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <DIO_enuSetPinDirection+0x90>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	2a 95       	dec	r18
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <DIO_enuSetPinDirection+0x8c>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    1bf8:	aa e3       	ldi	r26, 0x3A	; 58
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	ea e3       	ldi	r30, 0x3A	; 58
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	48 2f       	mov	r20, r24
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	b9 01       	movw	r22, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_enuSetPinDirection+0xba>
    1c14:	66 0f       	add	r22, r22
    1c16:	77 1f       	adc	r23, r23
    1c18:	8a 95       	dec	r24
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <DIO_enuSetPinDirection+0xb6>
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	7a c0       	rjmp	.+244    	; 0x1d18 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1c24:	a7 e3       	ldi	r26, 0x37	; 55
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e3       	ldi	r30, 0x37	; 55
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <DIO_enuSetPinDirection+0xe2>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	2a 95       	dec	r18
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <DIO_enuSetPinDirection+0xde>
    1c44:	80 95       	com	r24
    1c46:	84 23       	and	r24, r20
    1c48:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    1c4a:	a7 e3       	ldi	r26, 0x37	; 55
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e7 e3       	ldi	r30, 0x37	; 55
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	b9 01       	movw	r22, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_enuSetPinDirection+0x10c>
    1c66:	66 0f       	add	r22, r22
    1c68:	77 1f       	adc	r23, r23
    1c6a:	8a 95       	dec	r24
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_enuSetPinDirection+0x108>
    1c6e:	cb 01       	movw	r24, r22
    1c70:	84 2b       	or	r24, r20
    1c72:	8c 93       	st	X, r24
    1c74:	51 c0       	rjmp	.+162    	; 0x1d18 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1c76:	a4 e3       	ldi	r26, 0x34	; 52
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_enuSetPinDirection+0x134>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	2a 95       	dec	r18
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_enuSetPinDirection+0x130>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    1c9c:	a4 e3       	ldi	r26, 0x34	; 52
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e4 e3       	ldi	r30, 0x34	; 52
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_enuSetPinDirection+0x15e>
    1cb8:	66 0f       	add	r22, r22
    1cba:	77 1f       	adc	r23, r23
    1cbc:	8a 95       	dec	r24
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_enuSetPinDirection+0x15a>
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	84 2b       	or	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	28 c0       	rjmp	.+80     	; 0x1d18 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1cc8:	a1 e3       	ldi	r26, 0x31	; 49
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e1 e3       	ldi	r30, 0x31	; 49
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <DIO_enuSetPinDirection+0x186>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	2a 95       	dec	r18
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <DIO_enuSetPinDirection+0x182>
    1ce8:	80 95       	com	r24
    1cea:	84 23       	and	r24, r20
    1cec:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    1cee:	a1 e3       	ldi	r26, 0x31	; 49
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e1 e3       	ldi	r30, 0x31	; 49
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	b9 01       	movw	r22, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_enuSetPinDirection+0x1b0>
    1d0a:	66 0f       	add	r22, r22
    1d0c:	77 1f       	adc	r23, r23
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_enuSetPinDirection+0x1ac>
    1d12:	cb 01       	movw	r24, r22
    1d14:	84 2b       	or	r24, r20
    1d16:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d24:	26 96       	adiw	r28, 0x06	; 6
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	08 95       	ret

00001d36 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <DIO_enuSetPinValue+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <DIO_enuSetPinValue+0x8>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <DIO_enuSetPinValue+0xa>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	8a 83       	std	Y+2, r24	; 0x02
    1d46:	6b 83       	std	Y+3, r22	; 0x03
    1d48:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1d4a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	08 f0       	brcs	.+2      	; 0x1d54 <DIO_enuSetPinValue+0x1e>
    1d52:	d1 c0       	rjmp	.+418    	; 0x1ef6 <DIO_enuSetPinValue+0x1c0>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	88 30       	cpi	r24, 0x08	; 8
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <DIO_enuSetPinValue+0x26>
    1d5a:	cd c0       	rjmp	.+410    	; 0x1ef6 <DIO_enuSetPinValue+0x1c0>
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	08 f0       	brcs	.+2      	; 0x1d64 <DIO_enuSetPinValue+0x2e>
    1d62:	c9 c0       	rjmp	.+402    	; 0x1ef6 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	3e 83       	std	Y+6, r19	; 0x06
    1d6c:	2d 83       	std	Y+5, r18	; 0x05
    1d6e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d70:	7e 81       	ldd	r23, Y+6	; 0x06
    1d72:	61 30       	cpi	r22, 0x01	; 1
    1d74:	71 05       	cpc	r23, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <DIO_enuSetPinValue+0x44>
    1d78:	41 c0       	rjmp	.+130    	; 0x1dfc <DIO_enuSetPinValue+0xc6>
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	82 30       	cpi	r24, 0x02	; 2
    1d80:	91 05       	cpc	r25, r1
    1d82:	34 f4       	brge	.+12     	; 0x1d90 <DIO_enuSetPinValue+0x5a>
    1d84:	2d 81       	ldd	r18, Y+5	; 0x05
    1d86:	3e 81       	ldd	r19, Y+6	; 0x06
    1d88:	21 15       	cp	r18, r1
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	71 f0       	breq	.+28     	; 0x1daa <DIO_enuSetPinValue+0x74>
    1d8e:	b0 c0       	rjmp	.+352    	; 0x1ef0 <DIO_enuSetPinValue+0x1ba>
    1d90:	6d 81       	ldd	r22, Y+5	; 0x05
    1d92:	7e 81       	ldd	r23, Y+6	; 0x06
    1d94:	62 30       	cpi	r22, 0x02	; 2
    1d96:	71 05       	cpc	r23, r1
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <DIO_enuSetPinValue+0x66>
    1d9a:	59 c0       	rjmp	.+178    	; 0x1e4e <DIO_enuSetPinValue+0x118>
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	91 05       	cpc	r25, r1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <DIO_enuSetPinValue+0x72>
    1da6:	7c c0       	rjmp	.+248    	; 0x1ea0 <DIO_enuSetPinValue+0x16a>
    1da8:	a3 c0       	rjmp	.+326    	; 0x1ef0 <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1daa:	ab e3       	ldi	r26, 0x3B	; 59
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb e3       	ldi	r30, 0x3B	; 59
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enuSetPinValue+0x90>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	2a 95       	dec	r18
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enuSetPinValue+0x8c>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    1dd0:	ab e3       	ldi	r26, 0x3B	; 59
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	eb e3       	ldi	r30, 0x3B	; 59
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	48 2f       	mov	r20, r24
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	b9 01       	movw	r22, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_enuSetPinValue+0xba>
    1dec:	66 0f       	add	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	8a 95       	dec	r24
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_enuSetPinValue+0xb6>
    1df4:	cb 01       	movw	r24, r22
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	7a c0       	rjmp	.+244    	; 0x1ef0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1dfc:	a8 e3       	ldi	r26, 0x38	; 56
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e8 e3       	ldi	r30, 0x38	; 56
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <DIO_enuSetPinValue+0xe2>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	2a 95       	dec	r18
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <DIO_enuSetPinValue+0xde>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    1e22:	a8 e3       	ldi	r26, 0x38	; 56
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	b9 01       	movw	r22, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_enuSetPinValue+0x10c>
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	8a 95       	dec	r24
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_enuSetPinValue+0x108>
    1e46:	cb 01       	movw	r24, r22
    1e48:	84 2b       	or	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	51 c0       	rjmp	.+162    	; 0x1ef0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1e4e:	a5 e3       	ldi	r26, 0x35	; 53
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e3       	ldi	r30, 0x35	; 53
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_enuSetPinValue+0x134>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	2a 95       	dec	r18
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_enuSetPinValue+0x130>
    1e6e:	80 95       	com	r24
    1e70:	84 23       	and	r24, r20
    1e72:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    1e74:	a5 e3       	ldi	r26, 0x35	; 53
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e5 e3       	ldi	r30, 0x35	; 53
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_enuSetPinValue+0x15e>
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_enuSetPinValue+0x15a>
    1e98:	cb 01       	movw	r24, r22
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	28 c0       	rjmp	.+80     	; 0x1ef0 <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ea0:	a2 e3       	ldi	r26, 0x32	; 50
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e2 e3       	ldi	r30, 0x32	; 50
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_enuSetPinValue+0x186>
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	2a 95       	dec	r18
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_enuSetPinValue+0x182>
    1ec0:	80 95       	com	r24
    1ec2:	84 23       	and	r24, r20
    1ec4:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    1ec6:	a2 e3       	ldi	r26, 0x32	; 50
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e2 e3       	ldi	r30, 0x32	; 50
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	b9 01       	movw	r22, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_enuSetPinValue+0x1b0>
    1ee2:	66 0f       	add	r22, r22
    1ee4:	77 1f       	adc	r23, r23
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_enuSetPinValue+0x1ac>
    1eea:	cb 01       	movw	r24, r22
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    1efa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efc:	26 96       	adiw	r28, 0x06	; 6
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <DIO_enuTogPin+0x6>
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <DIO_enuTogPin+0x8>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
    1f1e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1f20:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <DIO_enuTogPin+0x1c>
    1f28:	75 c0       	rjmp	.+234    	; 0x2014 <DIO_enuTogPin+0x106>
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	08 f0       	brcs	.+2      	; 0x1f32 <DIO_enuTogPin+0x24>
    1f30:	71 c0       	rjmp	.+226    	; 0x2014 <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	3d 83       	std	Y+5, r19	; 0x05
    1f3a:	2c 83       	std	Y+4, r18	; 0x04
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	81 30       	cpi	r24, 0x01	; 1
    1f42:	91 05       	cpc	r25, r1
    1f44:	49 f1       	breq	.+82     	; 0x1f98 <DIO_enuTogPin+0x8a>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <DIO_enuTogPin+0x4c>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 f0       	breq	.+24     	; 0x1f70 <DIO_enuTogPin+0x62>
    1f58:	5a c0       	rjmp	.+180    	; 0x200e <DIO_enuTogPin+0x100>
    1f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5e:	22 30       	cpi	r18, 0x02	; 2
    1f60:	31 05       	cpc	r19, r1
    1f62:	71 f1       	breq	.+92     	; 0x1fc0 <DIO_enuTogPin+0xb2>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	83 30       	cpi	r24, 0x03	; 3
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	e9 f1       	breq	.+122    	; 0x1fe8 <DIO_enuTogPin+0xda>
    1f6e:	4f c0       	rjmp	.+158    	; 0x200e <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1f70:	aa e3       	ldi	r26, 0x3A	; 58
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	ea e3       	ldi	r30, 0x3A	; 58
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <DIO_enuTogPin+0x80>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <DIO_enuTogPin+0x7c>
    1f92:	84 27       	eor	r24, r20
    1f94:	8c 93       	st	X, r24
    1f96:	3b c0       	rjmp	.+118    	; 0x200e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1f98:	a7 e3       	ldi	r26, 0x37	; 55
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e7 e3       	ldi	r30, 0x37	; 55
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_enuTogPin+0xa8>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_enuTogPin+0xa4>
    1fba:	84 27       	eor	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	27 c0       	rjmp	.+78     	; 0x200e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1fc0:	a4 e3       	ldi	r26, 0x34	; 52
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e4 e3       	ldi	r30, 0x34	; 52
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_enuTogPin+0xd0>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_enuTogPin+0xcc>
    1fe2:	84 27       	eor	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	13 c0       	rjmp	.+38     	; 0x200e <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1fe8:	a1 e3       	ldi	r26, 0x31	; 49
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e1 e3       	ldi	r30, 0x31	; 49
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_enuTogPin+0xf8>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_enuTogPin+0xf4>
    200a:	84 27       	eor	r24, r20
    200c:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	27 97       	sbiw	r28, 0x07	; 7
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	8a 83       	std	Y+2, r24	; 0x02
    2040:	6b 83       	std	Y+3, r22	; 0x03
    2042:	5d 83       	std	Y+5, r21	; 0x05
    2044:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2046:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	09 f4       	brne	.+2      	; 0x2052 <DIO_enuGetPinValue+0x28>
    2050:	7e c0       	rjmp	.+252    	; 0x214e <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	84 30       	cpi	r24, 0x04	; 4
    2056:	08 f0       	brcs	.+2      	; 0x205a <DIO_enuGetPinValue+0x30>
    2058:	77 c0       	rjmp	.+238    	; 0x2148 <DIO_enuGetPinValue+0x11e>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	88 30       	cpi	r24, 0x08	; 8
    205e:	08 f0       	brcs	.+2      	; 0x2062 <DIO_enuGetPinValue+0x38>
    2060:	73 c0       	rjmp	.+230    	; 0x2148 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	3f 83       	std	Y+7, r19	; 0x07
    206a:	2e 83       	std	Y+6, r18	; 0x06
    206c:	4e 81       	ldd	r20, Y+6	; 0x06
    206e:	5f 81       	ldd	r21, Y+7	; 0x07
    2070:	41 30       	cpi	r20, 0x01	; 1
    2072:	51 05       	cpc	r21, r1
    2074:	59 f1       	breq	.+86     	; 0x20cc <DIO_enuGetPinValue+0xa2>
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
    2078:	9f 81       	ldd	r25, Y+7	; 0x07
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	91 05       	cpc	r25, r1
    207e:	34 f4       	brge	.+12     	; 0x208c <DIO_enuGetPinValue+0x62>
    2080:	2e 81       	ldd	r18, Y+6	; 0x06
    2082:	3f 81       	ldd	r19, Y+7	; 0x07
    2084:	21 15       	cp	r18, r1
    2086:	31 05       	cpc	r19, r1
    2088:	69 f0       	breq	.+26     	; 0x20a4 <DIO_enuGetPinValue+0x7a>
    208a:	5b c0       	rjmp	.+182    	; 0x2142 <DIO_enuGetPinValue+0x118>
    208c:	4e 81       	ldd	r20, Y+6	; 0x06
    208e:	5f 81       	ldd	r21, Y+7	; 0x07
    2090:	42 30       	cpi	r20, 0x02	; 2
    2092:	51 05       	cpc	r21, r1
    2094:	79 f1       	breq	.+94     	; 0x20f4 <DIO_enuGetPinValue+0xca>
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	9f 81       	ldd	r25, Y+7	; 0x07
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <DIO_enuGetPinValue+0x78>
    20a0:	3d c0       	rjmp	.+122    	; 0x211c <DIO_enuGetPinValue+0xf2>
    20a2:	4f c0       	rjmp	.+158    	; 0x2142 <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    20a4:	e9 e3       	ldi	r30, 0x39	; 57
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	a9 01       	movw	r20, r18
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <DIO_enuGetPinValue+0x92>
    20b8:	55 95       	asr	r21
    20ba:	47 95       	ror	r20
    20bc:	8a 95       	dec	r24
    20be:	e2 f7       	brpl	.-8      	; 0x20b8 <DIO_enuGetPinValue+0x8e>
    20c0:	ca 01       	movw	r24, r20
    20c2:	81 70       	andi	r24, 0x01	; 1
    20c4:	ec 81       	ldd	r30, Y+4	; 0x04
    20c6:	fd 81       	ldd	r31, Y+5	; 0x05
    20c8:	80 83       	st	Z, r24
    20ca:	3b c0       	rjmp	.+118    	; 0x2142 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    20cc:	e6 e3       	ldi	r30, 0x36	; 54
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a9 01       	movw	r20, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_enuGetPinValue+0xba>
    20e0:	55 95       	asr	r21
    20e2:	47 95       	ror	r20
    20e4:	8a 95       	dec	r24
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_enuGetPinValue+0xb6>
    20e8:	ca 01       	movw	r24, r20
    20ea:	81 70       	andi	r24, 0x01	; 1
    20ec:	ec 81       	ldd	r30, Y+4	; 0x04
    20ee:	fd 81       	ldd	r31, Y+5	; 0x05
    20f0:	80 83       	st	Z, r24
    20f2:	27 c0       	rjmp	.+78     	; 0x2142 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    20f4:	e3 e3       	ldi	r30, 0x33	; 51
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a9 01       	movw	r20, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_enuGetPinValue+0xe2>
    2108:	55 95       	asr	r21
    210a:	47 95       	ror	r20
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_enuGetPinValue+0xde>
    2110:	ca 01       	movw	r24, r20
    2112:	81 70       	andi	r24, 0x01	; 1
    2114:	ec 81       	ldd	r30, Y+4	; 0x04
    2116:	fd 81       	ldd	r31, Y+5	; 0x05
    2118:	80 83       	st	Z, r24
    211a:	13 c0       	rjmp	.+38     	; 0x2142 <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    211c:	e0 e3       	ldi	r30, 0x30	; 48
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_enuGetPinValue+0x10a>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_enuGetPinValue+0x106>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	ec 81       	ldd	r30, Y+4	; 0x04
    213e:	fd 81       	ldd	r31, Y+5	; 0x05
    2140:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	05 c0       	rjmp	.+10     	; 0x2152 <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2148:	83 e0       	ldi	r24, 0x03	; 3
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2152:	89 81       	ldd	r24, Y+1	; 0x01
}
    2154:	27 96       	adiw	r28, 0x07	; 7
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <KPD_enuGetPresedKey>:
#include "KPD_config.h"
#include "KPD_priv.h"


u8 KPD_enuGetPresedKey(void)
{
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	00 d0       	rcall	.+0      	; 0x216c <KPD_enuGetPresedKey+0x6>
    216c:	00 d0       	rcall	.+0      	; 0x216e <KPD_enuGetPresedKey+0x8>
    216e:	0f 92       	push	r0
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NOT_PRESSED_KEY;
    2174:	84 e1       	ldi	r24, 0x14	; 20
    2176:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    2178:	1a 82       	std	Y+2, r1	; 0x02
    217a:	7a c0       	rjmp	.+244    	; 0x2270 <KPD_enuGetPresedKey+0x10a>
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	e7 58       	subi	r30, 0x87	; 135
    2186:	fe 4f       	sbci	r31, 0xFE	; 254
    2188:	20 81       	ld	r18, Z
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	fc 01       	movw	r30, r24
    2192:	eb 58       	subi	r30, 0x8B	; 139
    2194:	fe 4f       	sbci	r31, 0xFE	; 254
    2196:	90 81       	ld	r25, Z
    2198:	82 2f       	mov	r24, r18
    219a:	69 2f       	mov	r22, r25
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	4b c0       	rjmp	.+150    	; 0x223c <KPD_enuGetPresedKey+0xd6>
		{
			/*	read the current row	*/
			DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	fc 01       	movw	r30, r24
    21ae:	ef 58       	subi	r30, 0x8F	; 143
    21b0:	fe 4f       	sbci	r31, 0xFE	; 254
    21b2:	40 81       	ld	r20, Z
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	fc 01       	movw	r30, r24
    21bc:	e3 59       	subi	r30, 0x93	; 147
    21be:	fe 4f       	sbci	r31, 0xFE	; 254
    21c0:	90 81       	ld	r25, Z
    21c2:	9e 01       	movw	r18, r28
    21c4:	2c 5f       	subi	r18, 0xFC	; 252
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	84 2f       	mov	r24, r20
    21ca:	69 2f       	mov	r22, r25
    21cc:	a9 01       	movw	r20, r18
    21ce:	0e 94 15 10 	call	0x202a	; 0x202a <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	88 23       	and	r24, r24
    21d6:	79 f5       	brne	.+94     	; 0x2236 <KPD_enuGetPresedKey+0xd0>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	48 2f       	mov	r20, r24
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	ca 01       	movw	r24, r20
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	fc 01       	movw	r30, r24
    21f4:	e3 58       	subi	r30, 0x83	; 131
    21f6:	fe 4f       	sbci	r31, 0xFE	; 254
    21f8:	80 81       	ld	r24, Z
    21fa:	8b 83       	std	Y+3, r24	; 0x03
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <KPD_enuGetPresedKey+0xc4>
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	fc 01       	movw	r30, r24
    2206:	ef 58       	subi	r30, 0x8F	; 143
    2208:	fe 4f       	sbci	r31, 0xFE	; 254
    220a:	40 81       	ld	r20, Z
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	88 2f       	mov	r24, r24
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	fc 01       	movw	r30, r24
    2214:	e3 59       	subi	r30, 0x93	; 147
    2216:	fe 4f       	sbci	r31, 0xFE	; 254
    2218:	90 81       	ld	r25, Z
    221a:	9e 01       	movw	r18, r28
    221c:	2c 5f       	subi	r18, 0xFC	; 252
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	84 2f       	mov	r24, r20
    2222:	69 2f       	mov	r22, r25
    2224:	a9 01       	movw	r20, r18
    2226:	0e 94 15 10 	call	0x202a	; 0x202a <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	88 23       	and	r24, r24
    222e:	39 f3       	breq	.-50     	; 0x21fe <KPD_enuGetPresedKey+0x98>
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	23 c0       	rjmp	.+70     	; 0x227c <KPD_enuGetPresedKey+0x116>

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	08 f4       	brcc	.+2      	; 0x2244 <KPD_enuGetPresedKey+0xde>
    2242:	b1 cf       	rjmp	.-158    	; 0x21a6 <KPD_enuGetPresedKey+0x40>
				}
				return Local_u8PressedKey;
			}
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	fc 01       	movw	r30, r24
    224c:	e7 58       	subi	r30, 0x87	; 135
    224e:	fe 4f       	sbci	r31, 0xFE	; 254
    2250:	20 81       	ld	r18, Z
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	fc 01       	movw	r30, r24
    225a:	eb 58       	subi	r30, 0x8B	; 139
    225c:	fe 4f       	sbci	r31, 0xFE	; 254
    225e:	90 81       	ld	r25, Z
    2260:	82 2f       	mov	r24, r18
    2262:	69 2f       	mov	r22, r25
    2264:	41 e0       	ldi	r20, 0x01	; 1
    2266:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	8a 83       	std	Y+2, r24	; 0x02
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	08 f4       	brcc	.+2      	; 0x2278 <KPD_enuGetPresedKey+0x112>
    2276:	82 cf       	rjmp	.-252    	; 0x217c <KPD_enuGetPresedKey+0x16>
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
	}

	return Local_u8PressedKey;
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	e9 97       	sbiw	r28, 0x39	; 57
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = ES_NOK;
    22a2:	19 ae       	std	Y+57, r1	; 0x39
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	61 e0       	ldi	r22, 0x01	; 1
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	67 e0       	ldi	r22, 0x07	; 7
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	66 e0       	ldi	r22, 0x06	; 6
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	65 e0       	ldi	r22, 0x05	; 5
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	64 e0       	ldi	r22, 0x04	; 4
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	ac e0       	ldi	r26, 0x0C	; 12
    22f0:	b2 e4       	ldi	r27, 0x42	; 66
    22f2:	8d ab       	std	Y+53, r24	; 0x35
    22f4:	9e ab       	std	Y+54, r25	; 0x36
    22f6:	af ab       	std	Y+55, r26	; 0x37
    22f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	6d a9       	ldd	r22, Y+53	; 0x35
    22fc:	7e a9       	ldd	r23, Y+54	; 0x36
    22fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2300:	98 ad       	ldd	r25, Y+56	; 0x38
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	53 e4       	ldi	r21, 0x43	; 67
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	89 ab       	std	Y+49, r24	; 0x31
    2314:	9a ab       	std	Y+50, r25	; 0x32
    2316:	ab ab       	std	Y+51, r26	; 0x33
    2318:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    231a:	69 a9       	ldd	r22, Y+49	; 0x31
    231c:	7a a9       	ldd	r23, Y+50	; 0x32
    231e:	8b a9       	ldd	r24, Y+51	; 0x33
    2320:	9c a9       	ldd	r25, Y+52	; 0x34
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	2c f4       	brge	.+10     	; 0x233c <LCD_enuInit+0xae>
		__ticks = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	98 ab       	std	Y+48, r25	; 0x30
    2338:	8f a7       	std	Y+47, r24	; 0x2f
    233a:	3f c0       	rjmp	.+126    	; 0x23ba <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    233c:	69 a9       	ldd	r22, Y+49	; 0x31
    233e:	7a a9       	ldd	r23, Y+50	; 0x32
    2340:	8b a9       	ldd	r24, Y+51	; 0x33
    2342:	9c a9       	ldd	r25, Y+52	; 0x34
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	4f e7       	ldi	r20, 0x7F	; 127
    234a:	57 e4       	ldi	r21, 0x47	; 71
    234c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2350:	18 16       	cp	r1, r24
    2352:	4c f5       	brge	.+82     	; 0x23a6 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2354:	6d a9       	ldd	r22, Y+53	; 0x35
    2356:	7e a9       	ldd	r23, Y+54	; 0x36
    2358:	8f a9       	ldd	r24, Y+55	; 0x37
    235a:	98 ad       	ldd	r25, Y+56	; 0x38
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	98 ab       	std	Y+48, r25	; 0x30
    237a:	8f a7       	std	Y+47, r24	; 0x2f
    237c:	0f c0       	rjmp	.+30     	; 0x239c <LCD_enuInit+0x10e>
    237e:	89 e1       	ldi	r24, 0x19	; 25
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9e a7       	std	Y+46, r25	; 0x2e
    2384:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2386:	8d a5       	ldd	r24, Y+45	; 0x2d
    2388:	9e a5       	ldd	r25, Y+46	; 0x2e
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_enuInit+0xfc>
    238e:	9e a7       	std	Y+46, r25	; 0x2e
    2390:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2392:	8f a5       	ldd	r24, Y+47	; 0x2f
    2394:	98 a9       	ldd	r25, Y+48	; 0x30
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	98 ab       	std	Y+48, r25	; 0x30
    239a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	8f a5       	ldd	r24, Y+47	; 0x2f
    239e:	98 a9       	ldd	r25, Y+48	; 0x30
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	69 f7       	brne	.-38     	; 0x237e <LCD_enuInit+0xf0>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	69 a9       	ldd	r22, Y+49	; 0x31
    23a8:	7a a9       	ldd	r23, Y+50	; 0x32
    23aa:	8b a9       	ldd	r24, Y+51	; 0x33
    23ac:	9c a9       	ldd	r25, Y+52	; 0x34
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	98 ab       	std	Y+48, r25	; 0x30
    23b8:	8f a7       	std	Y+47, r24	; 0x2f
    23ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    23bc:	98 a9       	ldd	r25, Y+48	; 0x30
    23be:	9c a7       	std	Y+44, r25	; 0x2c
    23c0:	8b a7       	std	Y+43, r24	; 0x2b
    23c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_enuInit+0x138>
    23ca:	9c a7       	std	Y+44, r25	; 0x2c
    23cc:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	63 e0       	ldi	r22, 0x03	; 3
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	62 e0       	ldi	r22, 0x02	; 2
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	41 e0       	ldi	r20, 0x01	; 1
    23e8:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    23f6:	88 e3       	ldi	r24, 0x38	; 56
    23f8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <LCD_invidSendCommend>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	8f a3       	std	Y+39, r24	; 0x27
    2406:	98 a7       	std	Y+40, r25	; 0x28
    2408:	a9 a7       	std	Y+41, r26	; 0x29
    240a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6f a1       	ldd	r22, Y+39	; 0x27
    240e:	78 a5       	ldd	r23, Y+40	; 0x28
    2410:	89 a5       	ldd	r24, Y+41	; 0x29
    2412:	9a a5       	ldd	r25, Y+42	; 0x2a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a e7       	ldi	r20, 0x7A	; 122
    241a:	53 e4       	ldi	r21, 0x43	; 67
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8b a3       	std	Y+35, r24	; 0x23
    2426:	9c a3       	std	Y+36, r25	; 0x24
    2428:	ad a3       	std	Y+37, r26	; 0x25
    242a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    242c:	6b a1       	ldd	r22, Y+35	; 0x23
    242e:	7c a1       	ldd	r23, Y+36	; 0x24
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_enuInit+0x1c0>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9a a3       	std	Y+34, r25	; 0x22
    244a:	89 a3       	std	Y+33, r24	; 0x21
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    244e:	6b a1       	ldd	r22, Y+35	; 0x23
    2450:	7c a1       	ldd	r23, Y+36	; 0x24
    2452:	8d a1       	ldd	r24, Y+37	; 0x25
    2454:	9e a1       	ldd	r25, Y+38	; 0x26
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6f a1       	ldd	r22, Y+39	; 0x27
    2468:	78 a5       	ldd	r23, Y+40	; 0x28
    246a:	89 a5       	ldd	r24, Y+41	; 0x29
    246c:	9a a5       	ldd	r25, Y+42	; 0x2a
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9a a3       	std	Y+34, r25	; 0x22
    248c:	89 a3       	std	Y+33, r24	; 0x21
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_enuInit+0x220>
    2490:	89 e1       	ldi	r24, 0x19	; 25
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	98 a3       	std	Y+32, r25	; 0x20
    2496:	8f 8f       	std	Y+31, r24	; 0x1f
    2498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    249a:	98 a1       	ldd	r25, Y+32	; 0x20
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_enuInit+0x20e>
    24a0:	98 a3       	std	Y+32, r25	; 0x20
    24a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	89 a1       	ldd	r24, Y+33	; 0x21
    24a6:	9a a1       	ldd	r25, Y+34	; 0x22
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9a a3       	std	Y+34, r25	; 0x22
    24ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	89 a1       	ldd	r24, Y+33	; 0x21
    24b0:	9a a1       	ldd	r25, Y+34	; 0x22
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_enuInit+0x202>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ba:	7c a1       	ldd	r23, Y+36	; 0x24
    24bc:	8d a1       	ldd	r24, Y+37	; 0x25
    24be:	9e a1       	ldd	r25, Y+38	; 0x26
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9a a3       	std	Y+34, r25	; 0x22
    24ca:	89 a3       	std	Y+33, r24	; 0x21
    24cc:	89 a1       	ldd	r24, Y+33	; 0x21
    24ce:	9a a1       	ldd	r25, Y+34	; 0x22
    24d0:	9e 8f       	std	Y+30, r25	; 0x1e
    24d2:	8d 8f       	std	Y+29, r24	; 0x1d
    24d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_enuInit+0x24a>
    24dc:	9e 8f       	std	Y+30, r25	; 0x1e
    24de:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    24e0:	8f e0       	ldi	r24, 0x0F	; 15
    24e2:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <LCD_invidSendCommend>
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	a0 e8       	ldi	r26, 0x80	; 128
    24ec:	bf e3       	ldi	r27, 0x3F	; 63
    24ee:	89 8f       	std	Y+25, r24	; 0x19
    24f0:	9a 8f       	std	Y+26, r25	; 0x1a
    24f2:	ab 8f       	std	Y+27, r26	; 0x1b
    24f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f6:	69 8d       	ldd	r22, Y+25	; 0x19
    24f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	4a e7       	ldi	r20, 0x7A	; 122
    2504:	53 e4       	ldi	r21, 0x43	; 67
    2506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	8d 8b       	std	Y+21, r24	; 0x15
    2510:	9e 8b       	std	Y+22, r25	; 0x16
    2512:	af 8b       	std	Y+23, r26	; 0x17
    2514:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2516:	6d 89       	ldd	r22, Y+21	; 0x15
    2518:	7e 89       	ldd	r23, Y+22	; 0x16
    251a:	8f 89       	ldd	r24, Y+23	; 0x17
    251c:	98 8d       	ldd	r25, Y+24	; 0x18
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e8       	ldi	r20, 0x80	; 128
    2524:	5f e3       	ldi	r21, 0x3F	; 63
    2526:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    252a:	88 23       	and	r24, r24
    252c:	2c f4       	brge	.+10     	; 0x2538 <LCD_enuInit+0x2aa>
		__ticks = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	3f c0       	rjmp	.+126    	; 0x25b6 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    2538:	6d 89       	ldd	r22, Y+21	; 0x15
    253a:	7e 89       	ldd	r23, Y+22	; 0x16
    253c:	8f 89       	ldd	r24, Y+23	; 0x17
    253e:	98 8d       	ldd	r25, Y+24	; 0x18
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	3f ef       	ldi	r19, 0xFF	; 255
    2544:	4f e7       	ldi	r20, 0x7F	; 127
    2546:	57 e4       	ldi	r21, 0x47	; 71
    2548:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    254c:	18 16       	cp	r1, r24
    254e:	4c f5       	brge	.+82     	; 0x25a2 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2550:	69 8d       	ldd	r22, Y+25	; 0x19
    2552:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2554:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2556:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	bc 01       	movw	r22, r24
    256a:	cd 01       	movw	r24, r26
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	0f c0       	rjmp	.+30     	; 0x2598 <LCD_enuInit+0x30a>
    257a:	89 e1       	ldi	r24, 0x19	; 25
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
    2582:	89 89       	ldd	r24, Y+17	; 0x11
    2584:	9a 89       	ldd	r25, Y+18	; 0x12
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	f1 f7       	brne	.-4      	; 0x2586 <LCD_enuInit+0x2f8>
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	69 f7       	brne	.-38     	; 0x257a <LCD_enuInit+0x2ec>
    25a0:	14 c0       	rjmp	.+40     	; 0x25ca <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	6d 89       	ldd	r22, Y+21	; 0x15
    25a4:	7e 89       	ldd	r23, Y+22	; 0x16
    25a6:	8f 89       	ldd	r24, Y+23	; 0x17
    25a8:	98 8d       	ldd	r25, Y+24	; 0x18
    25aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	9c 8b       	std	Y+20, r25	; 0x14
    25b4:	8b 8b       	std	Y+19, r24	; 0x13
    25b6:	8b 89       	ldd	r24, Y+19	; 0x13
    25b8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ba:	98 8b       	std	Y+16, r25	; 0x10
    25bc:	8f 87       	std	Y+15, r24	; 0x0f
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	98 89       	ldd	r25, Y+16	; 0x10
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <LCD_enuInit+0x334>
    25c6:	98 8b       	std	Y+16, r25	; 0x10
    25c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <LCD_invidSendCommend>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	a0 e0       	ldi	r26, 0x00	; 0
    25d6:	b0 e4       	ldi	r27, 0x40	; 64
    25d8:	8b 87       	std	Y+11, r24	; 0x0b
    25da:	9c 87       	std	Y+12, r25	; 0x0c
    25dc:	ad 87       	std	Y+13, r26	; 0x0d
    25de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	8f 83       	std	Y+7, r24	; 0x07
    25fa:	98 87       	std	Y+8, r25	; 0x08
    25fc:	a9 87       	std	Y+9, r26	; 0x09
    25fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	2c f4       	brge	.+10     	; 0x2622 <LCD_enuInit+0x394>
		__ticks = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
    2620:	3f c0       	rjmp	.+126    	; 0x26a0 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    2622:	6f 81       	ldd	r22, Y+7	; 0x07
    2624:	78 85       	ldd	r23, Y+8	; 0x08
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	9a 85       	ldd	r25, Y+10	; 0x0a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	3f ef       	ldi	r19, 0xFF	; 255
    262e:	4f e7       	ldi	r20, 0x7F	; 127
    2630:	57 e4       	ldi	r21, 0x47	; 71
    2632:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2636:	18 16       	cp	r1, r24
    2638:	4c f5       	brge	.+82     	; 0x268c <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263a:	6b 85       	ldd	r22, Y+11	; 0x0b
    263c:	7c 85       	ldd	r23, Y+12	; 0x0c
    263e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2640:	9e 85       	ldd	r25, Y+14	; 0x0e
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e2       	ldi	r20, 0x20	; 32
    2648:	51 e4       	ldi	r21, 0x41	; 65
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	bc 01       	movw	r22, r24
    2654:	cd 01       	movw	r24, r26
    2656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	0f c0       	rjmp	.+30     	; 0x2682 <LCD_enuInit+0x3f4>
    2664:	89 e1       	ldi	r24, 0x19	; 25
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_enuInit+0x3e2>
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	9e 83       	std	Y+6, r25	; 0x06
    2680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2682:	8d 81       	ldd	r24, Y+5	; 0x05
    2684:	9e 81       	ldd	r25, Y+6	; 0x06
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	69 f7       	brne	.-38     	; 0x2664 <LCD_enuInit+0x3d6>
    268a:	14 c0       	rjmp	.+40     	; 0x26b4 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	8d 81       	ldd	r24, Y+5	; 0x05
    26a2:	9e 81       	ldd	r25, Y+6	; 0x06
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	9a 81       	ldd	r25, Y+2	; 0x02
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <LCD_enuInit+0x41e>
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    26b4:	86 e0       	ldi	r24, 0x06	; 6
    26b6:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <LCD_invidSendCommend>


	return Local_u8ErrorState;
    26ba:	89 ad       	ldd	r24, Y+57	; 0x39
}
    26bc:	e9 96       	adiw	r28, 0x39	; 57
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <LCD_enuDisplayChar+0x6>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    26da:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT,RS_PIN , DIO_u8HIGH);
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	41 e0       	ldi	r20, 0x01	; 1
    26e2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Data);
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_Latch>
	Local_u8ErrorState = ES_OK;
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	00 d0       	rcall	.+0      	; 0x2702 <LCD_enuSendCommand+0x6>
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    2708:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Command);
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	0e 94 95 13 	call	0x272a	; 0x272a <LCD_Latch>
	Local_u8ErrorState =ES_OK;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorState;
    271e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_Latch>:

static void LCD_Latch(u8 Copy_u8Data)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	6d 97       	sbiw	r28, 0x1d	; 29
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
		DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	61 e0       	ldi	r22, 0x01	; 1
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		//write Data
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    2754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2756:	98 2f       	mov	r25, r24
    2758:	99 1f       	adc	r25, r25
    275a:	99 27       	eor	r25, r25
    275c:	99 1f       	adc	r25, r25
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	67 e0       	ldi	r22, 0x07	; 7
    2762:	49 2f       	mov	r20, r25
    2764:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    2768:	8d 8d       	ldd	r24, Y+29	; 0x1d
    276a:	82 95       	swap	r24
    276c:	86 95       	lsr	r24
    276e:	86 95       	lsr	r24
    2770:	83 70       	andi	r24, 0x03	; 3
    2772:	98 2f       	mov	r25, r24
    2774:	91 70       	andi	r25, 0x01	; 1
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	66 e0       	ldi	r22, 0x06	; 6
    277a:	49 2f       	mov	r20, r25
    277c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2782:	82 95       	swap	r24
    2784:	86 95       	lsr	r24
    2786:	87 70       	andi	r24, 0x07	; 7
    2788:	98 2f       	mov	r25, r24
    278a:	91 70       	andi	r25, 0x01	; 1
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    2796:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2798:	82 95       	swap	r24
    279a:	8f 70       	andi	r24, 0x0F	; 15
    279c:	98 2f       	mov	r25, r24
    279e:	91 70       	andi	r25, 0x01	; 1
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	64 e0       	ldi	r22, 0x04	; 4
    27a4:	49 2f       	mov	r20, r25
    27a6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>

	#if LCD_MODE == EIGHT_BIT

		DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    27aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ac:	86 95       	lsr	r24
    27ae:	86 95       	lsr	r24
    27b0:	86 95       	lsr	r24
    27b2:	98 2f       	mov	r25, r24
    27b4:	91 70       	andi	r25, 0x01	; 1
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	63 e0       	ldi	r22, 0x03	; 3
    27ba:	49 2f       	mov	r20, r25
    27bc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    27c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c2:	86 95       	lsr	r24
    27c4:	86 95       	lsr	r24
    27c6:	98 2f       	mov	r25, r24
    27c8:	91 70       	andi	r25, 0x01	; 1
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	62 e0       	ldi	r22, 0x02	; 2
    27ce:	49 2f       	mov	r20, r25
    27d0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    27d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27d6:	86 95       	lsr	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	91 70       	andi	r25, 0x01	; 1
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	49 2f       	mov	r20, r25
    27e2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    27e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27e8:	98 2f       	mov	r25, r24
    27ea:	91 70       	andi	r25, 0x01	; 1
    27ec:	80 e0       	ldi	r24, 0x00	; 0
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	49 2f       	mov	r20, r25
    27f2:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	#elif LCD_MODE == FOUR_BIT

	#endif

		// Enable latch
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	41 e0       	ldi	r20, 0x01	; 1
    27fc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	a0 e2       	ldi	r26, 0x20	; 32
    2806:	b1 e4       	ldi	r27, 0x41	; 65
    2808:	89 8f       	std	Y+25, r24	; 0x19
    280a:	9a 8f       	std	Y+26, r25	; 0x1a
    280c:	ab 8f       	std	Y+27, r26	; 0x1b
    280e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	69 8d       	ldd	r22, Y+25	; 0x19
    2812:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a e7       	ldi	r20, 0x7A	; 122
    281e:	53 e4       	ldi	r21, 0x43	; 67
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8d 8b       	std	Y+21, r24	; 0x15
    282a:	9e 8b       	std	Y+22, r25	; 0x16
    282c:	af 8b       	std	Y+23, r26	; 0x17
    282e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2830:	6d 89       	ldd	r22, Y+21	; 0x15
    2832:	7e 89       	ldd	r23, Y+22	; 0x16
    2834:	8f 89       	ldd	r24, Y+23	; 0x17
    2836:	98 8d       	ldd	r25, Y+24	; 0x18
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <LCD_Latch+0x128>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9c 8b       	std	Y+20, r25	; 0x14
    284e:	8b 8b       	std	Y+19, r24	; 0x13
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <LCD_Latch+0x1a6>
	else if (__tmp > 65535)
    2852:	6d 89       	ldd	r22, Y+21	; 0x15
    2854:	7e 89       	ldd	r23, Y+22	; 0x16
    2856:	8f 89       	ldd	r24, Y+23	; 0x17
    2858:	98 8d       	ldd	r25, Y+24	; 0x18
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <LCD_Latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	69 8d       	ldd	r22, Y+25	; 0x19
    286c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    286e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2870:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <LCD_Latch+0x188>
    2894:	89 e1       	ldi	r24, 0x19	; 25
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9a 8b       	std	Y+18, r25	; 0x12
    289a:	89 8b       	std	Y+17, r24	; 0x11
    289c:	89 89       	ldd	r24, Y+17	; 0x11
    289e:	9a 89       	ldd	r25, Y+18	; 0x12
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <LCD_Latch+0x176>
    28a4:	9a 8b       	std	Y+18, r25	; 0x12
    28a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8b 89       	ldd	r24, Y+19	; 0x13
    28aa:	9c 89       	ldd	r25, Y+20	; 0x14
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9c 8b       	std	Y+20, r25	; 0x14
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <LCD_Latch+0x16a>
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <LCD_Latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6d 89       	ldd	r22, Y+21	; 0x15
    28be:	7e 89       	ldd	r23, Y+22	; 0x16
    28c0:	8f 89       	ldd	r24, Y+23	; 0x17
    28c2:	98 8d       	ldd	r25, Y+24	; 0x18
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9c 8b       	std	Y+20, r25	; 0x14
    28ce:	8b 8b       	std	Y+19, r24	; 0x13
    28d0:	8b 89       	ldd	r24, Y+19	; 0x13
    28d2:	9c 89       	ldd	r25, Y+20	; 0x14
    28d4:	98 8b       	std	Y+16, r25	; 0x10
    28d6:	8f 87       	std	Y+15, r24	; 0x0f
    28d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28da:	98 89       	ldd	r25, Y+16	; 0x10
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <LCD_Latch+0x1b2>
    28e0:	98 8b       	std	Y+16, r25	; 0x10
    28e2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	62 e0       	ldi	r22, 0x02	; 2
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 e2       	ldi	r26, 0x20	; 32
    28f4:	b1 e4       	ldi	r27, 0x41	; 65
    28f6:	8b 87       	std	Y+11, r24	; 0x0b
    28f8:	9c 87       	std	Y+12, r25	; 0x0c
    28fa:	ad 87       	std	Y+13, r26	; 0x0d
    28fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2900:	7c 85       	ldd	r23, Y+12	; 0x0c
    2902:	8d 85       	ldd	r24, Y+13	; 0x0d
    2904:	9e 85       	ldd	r25, Y+14	; 0x0e
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a e7       	ldi	r20, 0x7A	; 122
    290c:	53 e4       	ldi	r21, 0x43	; 67
    290e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8f 83       	std	Y+7, r24	; 0x07
    2918:	98 87       	std	Y+8, r25	; 0x08
    291a:	a9 87       	std	Y+9, r26	; 0x09
    291c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    291e:	6f 81       	ldd	r22, Y+7	; 0x07
    2920:	78 85       	ldd	r23, Y+8	; 0x08
    2922:	89 85       	ldd	r24, Y+9	; 0x09
    2924:	9a 85       	ldd	r25, Y+10	; 0x0a
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2932:	88 23       	and	r24, r24
    2934:	2c f4       	brge	.+10     	; 0x2940 <LCD_Latch+0x216>
		__ticks = 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
    293e:	3f c0       	rjmp	.+126    	; 0x29be <LCD_Latch+0x294>
	else if (__tmp > 65535)
    2940:	6f 81       	ldd	r22, Y+7	; 0x07
    2942:	78 85       	ldd	r23, Y+8	; 0x08
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	9a 85       	ldd	r25, Y+10	; 0x0a
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	4c f5       	brge	.+82     	; 0x29aa <LCD_Latch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	6b 85       	ldd	r22, Y+11	; 0x0b
    295a:	7c 85       	ldd	r23, Y+12	; 0x0c
    295c:	8d 85       	ldd	r24, Y+13	; 0x0d
    295e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e2       	ldi	r20, 0x20	; 32
    2966:	51 e4       	ldi	r21, 0x41	; 65
    2968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <LCD_Latch+0x276>
    2982:	89 e1       	ldi	r24, 0x19	; 25
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	9c 81       	ldd	r25, Y+4	; 0x04
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <LCD_Latch+0x264>
    2992:	9c 83       	std	Y+4, r25	; 0x04
    2994:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a0:	8d 81       	ldd	r24, Y+5	; 0x05
    29a2:	9e 81       	ldd	r25, Y+6	; 0x06
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	69 f7       	brne	.-38     	; 0x2982 <LCD_Latch+0x258>
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <LCD_Latch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29aa:	6f 81       	ldd	r22, Y+7	; 0x07
    29ac:	78 85       	ldd	r23, Y+8	; 0x08
    29ae:	89 85       	ldd	r24, Y+9	; 0x09
    29b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9e 83       	std	Y+6, r25	; 0x06
    29bc:	8d 83       	std	Y+5, r24	; 0x05
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	9a 83       	std	Y+2, r25	; 0x02
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	9a 81       	ldd	r25, Y+2	; 0x02
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <LCD_Latch+0x2a0>
    29ce:	9a 83       	std	Y+2, r25	; 0x02
    29d0:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(10);
}
    29d2:	6d 96       	adiw	r28, 0x1d	; 29
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	cf 91       	pop	r28
    29e0:	df 91       	pop	r29
    29e2:	08 95       	ret

000029e4 <LCD_invidSendCommend>:
inline static void LCD_invidSendCommend(u8 Copy_u8Command)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	2f 97       	sbiw	r28, 0x0f	; 15
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	62 e0       	ldi	r22, 0x02	; 2
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    2a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	99 27       	eor	r25, r25
    2a20:	99 1f       	adc	r25, r25
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	67 e0       	ldi	r22, 0x07	; 7
    2a26:	49 2f       	mov	r20, r25
    2a28:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    2a2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2e:	82 95       	swap	r24
    2a30:	86 95       	lsr	r24
    2a32:	86 95       	lsr	r24
    2a34:	83 70       	andi	r24, 0x03	; 3
    2a36:	98 2f       	mov	r25, r24
    2a38:	91 70       	andi	r25, 0x01	; 1
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	66 e0       	ldi	r22, 0x06	; 6
    2a3e:	49 2f       	mov	r20, r25
    2a40:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    2a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a46:	82 95       	swap	r24
    2a48:	86 95       	lsr	r24
    2a4a:	87 70       	andi	r24, 0x07	; 7
    2a4c:	98 2f       	mov	r25, r24
    2a4e:	91 70       	andi	r25, 0x01	; 1
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	65 e0       	ldi	r22, 0x05	; 5
    2a54:	49 2f       	mov	r20, r25
    2a56:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a5c:	82 95       	swap	r24
    2a5e:	8f 70       	andi	r24, 0x0F	; 15
    2a60:	98 2f       	mov	r25, r24
    2a62:	91 70       	andi	r25, 0x01	; 1
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	64 e0       	ldi	r22, 0x04	; 4
    2a68:	49 2f       	mov	r20, r25
    2a6a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a70:	86 95       	lsr	r24
    2a72:	86 95       	lsr	r24
    2a74:	86 95       	lsr	r24
    2a76:	98 2f       	mov	r25, r24
    2a78:	91 70       	andi	r25, 0x01	; 1
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	63 e0       	ldi	r22, 0x03	; 3
    2a7e:	49 2f       	mov	r20, r25
    2a80:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	86 95       	lsr	r24
    2a88:	86 95       	lsr	r24
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	91 70       	andi	r25, 0x01	; 1
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	62 e0       	ldi	r22, 0x02	; 2
    2a92:	49 2f       	mov	r20, r25
    2a94:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    2a98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a9a:	86 95       	lsr	r24
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	91 70       	andi	r25, 0x01	; 1
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	49 2f       	mov	r20, r25
    2aa6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aac:	98 2f       	mov	r25, r24
    2aae:	91 70       	andi	r25, 0x01	; 1
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	60 e0       	ldi	r22, 0x00	; 0
    2ab4:	49 2f       	mov	r20, r25
    2ab6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	62 e0       	ldi	r22, 0x02	; 2
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e2       	ldi	r26, 0x20	; 32
    2aca:	b1 e4       	ldi	r27, 0x41	; 65
    2acc:	8b 87       	std	Y+11, r24	; 0x0b
    2ace:	9c 87       	std	Y+12, r25	; 0x0c
    2ad0:	ad 87       	std	Y+13, r26	; 0x0d
    2ad2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	53 e4       	ldi	r21, 0x43	; 67
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8f 83       	std	Y+7, r24	; 0x07
    2aee:	98 87       	std	Y+8, r25	; 0x08
    2af0:	a9 87       	std	Y+9, r26	; 0x09
    2af2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    2b16:	6f 81       	ldd	r22, Y+7	; 0x07
    2b18:	78 85       	ldd	r23, Y+8	; 0x08
    2b1a:	89 85       	ldd	r24, Y+9	; 0x09
    2b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_invidSendCommend+0x192>
    2b58:	89 e1       	ldi	r24, 0x19	; 25
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9c 83       	std	Y+4, r25	; 0x04
    2b5e:	8b 83       	std	Y+3, r24	; 0x03
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_invidSendCommend+0x180>
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9e 83       	std	Y+6, r25	; 0x06
    2b74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <LCD_invidSendCommend+0x174>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6f 81       	ldd	r22, Y+7	; 0x07
    2b82:	78 85       	ldd	r23, Y+8	; 0x08
    2b84:	89 85       	ldd	r24, Y+9	; 0x09
    2b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	8d 81       	ldd	r24, Y+5	; 0x05
    2b96:	9e 81       	ldd	r25, Y+6	; 0x06
    2b98:	9a 83       	std	Y+2, r25	; 0x02
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_invidSendCommend+0x1bc>
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <DIO_enuSetPinValue>
}
    2bb2:	2f 96       	adiw	r28, 0x0f	; 15
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <main>:
#include "KPD_int.h"

#include "CALC.h"

int main(void)
{
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
				LCD_enuInit();
				Local_u8Flag = 0;
			}*/
		/*}
	}*/
	return 0;
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
}
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <__mulsi3>:
    2bd6:	62 9f       	mul	r22, r18
    2bd8:	d0 01       	movw	r26, r0
    2bda:	73 9f       	mul	r23, r19
    2bdc:	f0 01       	movw	r30, r0
    2bde:	82 9f       	mul	r24, r18
    2be0:	e0 0d       	add	r30, r0
    2be2:	f1 1d       	adc	r31, r1
    2be4:	64 9f       	mul	r22, r20
    2be6:	e0 0d       	add	r30, r0
    2be8:	f1 1d       	adc	r31, r1
    2bea:	92 9f       	mul	r25, r18
    2bec:	f0 0d       	add	r31, r0
    2bee:	83 9f       	mul	r24, r19
    2bf0:	f0 0d       	add	r31, r0
    2bf2:	74 9f       	mul	r23, r20
    2bf4:	f0 0d       	add	r31, r0
    2bf6:	65 9f       	mul	r22, r21
    2bf8:	f0 0d       	add	r31, r0
    2bfa:	99 27       	eor	r25, r25
    2bfc:	72 9f       	mul	r23, r18
    2bfe:	b0 0d       	add	r27, r0
    2c00:	e1 1d       	adc	r30, r1
    2c02:	f9 1f       	adc	r31, r25
    2c04:	63 9f       	mul	r22, r19
    2c06:	b0 0d       	add	r27, r0
    2c08:	e1 1d       	adc	r30, r1
    2c0a:	f9 1f       	adc	r31, r25
    2c0c:	bd 01       	movw	r22, r26
    2c0e:	cf 01       	movw	r24, r30
    2c10:	11 24       	eor	r1, r1
    2c12:	08 95       	ret

00002c14 <__prologue_saves__>:
    2c14:	2f 92       	push	r2
    2c16:	3f 92       	push	r3
    2c18:	4f 92       	push	r4
    2c1a:	5f 92       	push	r5
    2c1c:	6f 92       	push	r6
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	ca 1b       	sub	r28, r26
    2c3e:	db 0b       	sbc	r29, r27
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	09 94       	ijmp

00002c4c <__epilogue_restores__>:
    2c4c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c4e:	39 88       	ldd	r3, Y+17	; 0x11
    2c50:	48 88       	ldd	r4, Y+16	; 0x10
    2c52:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c54:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c56:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c58:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c5e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c60:	c8 84       	ldd	r12, Y+8	; 0x08
    2c62:	df 80       	ldd	r13, Y+7	; 0x07
    2c64:	ee 80       	ldd	r14, Y+6	; 0x06
    2c66:	fd 80       	ldd	r15, Y+5	; 0x05
    2c68:	0c 81       	ldd	r16, Y+4	; 0x04
    2c6a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c6c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c6e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c70:	ce 0f       	add	r28, r30
    2c72:	d1 1d       	adc	r29, r1
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	ed 01       	movw	r28, r26
    2c80:	08 95       	ret

00002c82 <sprintf>:
    2c82:	ae e0       	ldi	r26, 0x0E	; 14
    2c84:	b0 e0       	ldi	r27, 0x00	; 0
    2c86:	e7 e4       	ldi	r30, 0x47	; 71
    2c88:	f6 e1       	ldi	r31, 0x16	; 22
    2c8a:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__prologue_saves__+0x1c>
    2c8e:	0d 89       	ldd	r16, Y+21	; 0x15
    2c90:	1e 89       	ldd	r17, Y+22	; 0x16
    2c92:	86 e0       	ldi	r24, 0x06	; 6
    2c94:	8c 83       	std	Y+4, r24	; 0x04
    2c96:	1a 83       	std	Y+2, r17	; 0x02
    2c98:	09 83       	std	Y+1, r16	; 0x01
    2c9a:	8f ef       	ldi	r24, 0xFF	; 255
    2c9c:	9f e7       	ldi	r25, 0x7F	; 127
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	9e 01       	movw	r18, r28
    2ca4:	27 5e       	subi	r18, 0xE7	; 231
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	ce 01       	movw	r24, r28
    2caa:	01 96       	adiw	r24, 0x01	; 1
    2cac:	6f 89       	ldd	r22, Y+23	; 0x17
    2cae:	78 8d       	ldd	r23, Y+24	; 0x18
    2cb0:	a9 01       	movw	r20, r18
    2cb2:	0e 94 65 16 	call	0x2cca	; 0x2cca <vfprintf>
    2cb6:	2f 81       	ldd	r18, Y+7	; 0x07
    2cb8:	38 85       	ldd	r19, Y+8	; 0x08
    2cba:	02 0f       	add	r16, r18
    2cbc:	13 1f       	adc	r17, r19
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	10 82       	st	Z, r1
    2cc2:	2e 96       	adiw	r28, 0x0e	; 14
    2cc4:	e4 e0       	ldi	r30, 0x04	; 4
    2cc6:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__epilogue_restores__+0x1c>

00002cca <vfprintf>:
    2cca:	ab e0       	ldi	r26, 0x0B	; 11
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	eb e6       	ldi	r30, 0x6B	; 107
    2cd0:	f6 e1       	ldi	r31, 0x16	; 22
    2cd2:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__prologue_saves__>
    2cd6:	3c 01       	movw	r6, r24
    2cd8:	2b 01       	movw	r4, r22
    2cda:	5a 01       	movw	r10, r20
    2cdc:	fc 01       	movw	r30, r24
    2cde:	17 82       	std	Z+7, r1	; 0x07
    2ce0:	16 82       	std	Z+6, r1	; 0x06
    2ce2:	83 81       	ldd	r24, Z+3	; 0x03
    2ce4:	81 fd       	sbrc	r24, 1
    2ce6:	03 c0       	rjmp	.+6      	; 0x2cee <vfprintf+0x24>
    2ce8:	6f ef       	ldi	r22, 0xFF	; 255
    2cea:	7f ef       	ldi	r23, 0xFF	; 255
    2cec:	c6 c1       	rjmp	.+908    	; 0x307a <vfprintf+0x3b0>
    2cee:	9a e0       	ldi	r25, 0x0A	; 10
    2cf0:	89 2e       	mov	r8, r25
    2cf2:	1e 01       	movw	r2, r28
    2cf4:	08 94       	sec
    2cf6:	21 1c       	adc	r2, r1
    2cf8:	31 1c       	adc	r3, r1
    2cfa:	f3 01       	movw	r30, r6
    2cfc:	23 81       	ldd	r18, Z+3	; 0x03
    2cfe:	f2 01       	movw	r30, r4
    2d00:	23 fd       	sbrc	r18, 3
    2d02:	85 91       	lpm	r24, Z+
    2d04:	23 ff       	sbrs	r18, 3
    2d06:	81 91       	ld	r24, Z+
    2d08:	2f 01       	movw	r4, r30
    2d0a:	88 23       	and	r24, r24
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <vfprintf+0x46>
    2d0e:	b2 c1       	rjmp	.+868    	; 0x3074 <vfprintf+0x3aa>
    2d10:	85 32       	cpi	r24, 0x25	; 37
    2d12:	39 f4       	brne	.+14     	; 0x2d22 <vfprintf+0x58>
    2d14:	23 fd       	sbrc	r18, 3
    2d16:	85 91       	lpm	r24, Z+
    2d18:	23 ff       	sbrs	r18, 3
    2d1a:	81 91       	ld	r24, Z+
    2d1c:	2f 01       	movw	r4, r30
    2d1e:	85 32       	cpi	r24, 0x25	; 37
    2d20:	29 f4       	brne	.+10     	; 0x2d2c <vfprintf+0x62>
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	b3 01       	movw	r22, r6
    2d26:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    2d2a:	e7 cf       	rjmp	.-50     	; 0x2cfa <vfprintf+0x30>
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	ff 24       	eor	r15, r15
    2d30:	ee 24       	eor	r14, r14
    2d32:	99 24       	eor	r9, r9
    2d34:	ff e1       	ldi	r31, 0x1F	; 31
    2d36:	ff 15       	cp	r31, r15
    2d38:	d0 f0       	brcs	.+52     	; 0x2d6e <vfprintf+0xa4>
    2d3a:	9b 32       	cpi	r25, 0x2B	; 43
    2d3c:	69 f0       	breq	.+26     	; 0x2d58 <vfprintf+0x8e>
    2d3e:	9c 32       	cpi	r25, 0x2C	; 44
    2d40:	28 f4       	brcc	.+10     	; 0x2d4c <vfprintf+0x82>
    2d42:	90 32       	cpi	r25, 0x20	; 32
    2d44:	59 f0       	breq	.+22     	; 0x2d5c <vfprintf+0x92>
    2d46:	93 32       	cpi	r25, 0x23	; 35
    2d48:	91 f4       	brne	.+36     	; 0x2d6e <vfprintf+0xa4>
    2d4a:	0e c0       	rjmp	.+28     	; 0x2d68 <vfprintf+0x9e>
    2d4c:	9d 32       	cpi	r25, 0x2D	; 45
    2d4e:	49 f0       	breq	.+18     	; 0x2d62 <vfprintf+0x98>
    2d50:	90 33       	cpi	r25, 0x30	; 48
    2d52:	69 f4       	brne	.+26     	; 0x2d6e <vfprintf+0xa4>
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	24 c0       	rjmp	.+72     	; 0x2da0 <vfprintf+0xd6>
    2d58:	52 e0       	ldi	r21, 0x02	; 2
    2d5a:	f5 2a       	or	r15, r21
    2d5c:	84 e0       	ldi	r24, 0x04	; 4
    2d5e:	f8 2a       	or	r15, r24
    2d60:	28 c0       	rjmp	.+80     	; 0x2db2 <vfprintf+0xe8>
    2d62:	98 e0       	ldi	r25, 0x08	; 8
    2d64:	f9 2a       	or	r15, r25
    2d66:	25 c0       	rjmp	.+74     	; 0x2db2 <vfprintf+0xe8>
    2d68:	e0 e1       	ldi	r30, 0x10	; 16
    2d6a:	fe 2a       	or	r15, r30
    2d6c:	22 c0       	rjmp	.+68     	; 0x2db2 <vfprintf+0xe8>
    2d6e:	f7 fc       	sbrc	r15, 7
    2d70:	29 c0       	rjmp	.+82     	; 0x2dc4 <vfprintf+0xfa>
    2d72:	89 2f       	mov	r24, r25
    2d74:	80 53       	subi	r24, 0x30	; 48
    2d76:	8a 30       	cpi	r24, 0x0A	; 10
    2d78:	70 f4       	brcc	.+28     	; 0x2d96 <vfprintf+0xcc>
    2d7a:	f6 fe       	sbrs	r15, 6
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <vfprintf+0xbe>
    2d7e:	98 9c       	mul	r9, r8
    2d80:	90 2c       	mov	r9, r0
    2d82:	11 24       	eor	r1, r1
    2d84:	98 0e       	add	r9, r24
    2d86:	15 c0       	rjmp	.+42     	; 0x2db2 <vfprintf+0xe8>
    2d88:	e8 9c       	mul	r14, r8
    2d8a:	e0 2c       	mov	r14, r0
    2d8c:	11 24       	eor	r1, r1
    2d8e:	e8 0e       	add	r14, r24
    2d90:	f0 e2       	ldi	r31, 0x20	; 32
    2d92:	ff 2a       	or	r15, r31
    2d94:	0e c0       	rjmp	.+28     	; 0x2db2 <vfprintf+0xe8>
    2d96:	9e 32       	cpi	r25, 0x2E	; 46
    2d98:	29 f4       	brne	.+10     	; 0x2da4 <vfprintf+0xda>
    2d9a:	f6 fc       	sbrc	r15, 6
    2d9c:	6b c1       	rjmp	.+726    	; 0x3074 <vfprintf+0x3aa>
    2d9e:	40 e4       	ldi	r20, 0x40	; 64
    2da0:	f4 2a       	or	r15, r20
    2da2:	07 c0       	rjmp	.+14     	; 0x2db2 <vfprintf+0xe8>
    2da4:	9c 36       	cpi	r25, 0x6C	; 108
    2da6:	19 f4       	brne	.+6      	; 0x2dae <vfprintf+0xe4>
    2da8:	50 e8       	ldi	r21, 0x80	; 128
    2daa:	f5 2a       	or	r15, r21
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vfprintf+0xe8>
    2dae:	98 36       	cpi	r25, 0x68	; 104
    2db0:	49 f4       	brne	.+18     	; 0x2dc4 <vfprintf+0xfa>
    2db2:	f2 01       	movw	r30, r4
    2db4:	23 fd       	sbrc	r18, 3
    2db6:	95 91       	lpm	r25, Z+
    2db8:	23 ff       	sbrs	r18, 3
    2dba:	91 91       	ld	r25, Z+
    2dbc:	2f 01       	movw	r4, r30
    2dbe:	99 23       	and	r25, r25
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <vfprintf+0xfa>
    2dc2:	b8 cf       	rjmp	.-144    	; 0x2d34 <vfprintf+0x6a>
    2dc4:	89 2f       	mov	r24, r25
    2dc6:	85 54       	subi	r24, 0x45	; 69
    2dc8:	83 30       	cpi	r24, 0x03	; 3
    2dca:	18 f0       	brcs	.+6      	; 0x2dd2 <vfprintf+0x108>
    2dcc:	80 52       	subi	r24, 0x20	; 32
    2dce:	83 30       	cpi	r24, 0x03	; 3
    2dd0:	38 f4       	brcc	.+14     	; 0x2de0 <vfprintf+0x116>
    2dd2:	44 e0       	ldi	r20, 0x04	; 4
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	a4 0e       	add	r10, r20
    2dd8:	b5 1e       	adc	r11, r21
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	59 83       	std	Y+1, r21	; 0x01
    2dde:	0f c0       	rjmp	.+30     	; 0x2dfe <vfprintf+0x134>
    2de0:	93 36       	cpi	r25, 0x63	; 99
    2de2:	31 f0       	breq	.+12     	; 0x2df0 <vfprintf+0x126>
    2de4:	93 37       	cpi	r25, 0x73	; 115
    2de6:	79 f0       	breq	.+30     	; 0x2e06 <vfprintf+0x13c>
    2de8:	93 35       	cpi	r25, 0x53	; 83
    2dea:	09 f0       	breq	.+2      	; 0x2dee <vfprintf+0x124>
    2dec:	56 c0       	rjmp	.+172    	; 0x2e9a <vfprintf+0x1d0>
    2dee:	20 c0       	rjmp	.+64     	; 0x2e30 <vfprintf+0x166>
    2df0:	f5 01       	movw	r30, r10
    2df2:	80 81       	ld	r24, Z
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	42 e0       	ldi	r20, 0x02	; 2
    2df8:	50 e0       	ldi	r21, 0x00	; 0
    2dfa:	a4 0e       	add	r10, r20
    2dfc:	b5 1e       	adc	r11, r21
    2dfe:	61 01       	movw	r12, r2
    2e00:	01 e0       	ldi	r16, 0x01	; 1
    2e02:	10 e0       	ldi	r17, 0x00	; 0
    2e04:	12 c0       	rjmp	.+36     	; 0x2e2a <vfprintf+0x160>
    2e06:	f5 01       	movw	r30, r10
    2e08:	c0 80       	ld	r12, Z
    2e0a:	d1 80       	ldd	r13, Z+1	; 0x01
    2e0c:	f6 fc       	sbrc	r15, 6
    2e0e:	03 c0       	rjmp	.+6      	; 0x2e16 <vfprintf+0x14c>
    2e10:	6f ef       	ldi	r22, 0xFF	; 255
    2e12:	7f ef       	ldi	r23, 0xFF	; 255
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <vfprintf+0x150>
    2e16:	69 2d       	mov	r22, r9
    2e18:	70 e0       	ldi	r23, 0x00	; 0
    2e1a:	42 e0       	ldi	r20, 0x02	; 2
    2e1c:	50 e0       	ldi	r21, 0x00	; 0
    2e1e:	a4 0e       	add	r10, r20
    2e20:	b5 1e       	adc	r11, r21
    2e22:	c6 01       	movw	r24, r12
    2e24:	0e 94 4d 18 	call	0x309a	; 0x309a <strnlen>
    2e28:	8c 01       	movw	r16, r24
    2e2a:	5f e7       	ldi	r21, 0x7F	; 127
    2e2c:	f5 22       	and	r15, r21
    2e2e:	14 c0       	rjmp	.+40     	; 0x2e58 <vfprintf+0x18e>
    2e30:	f5 01       	movw	r30, r10
    2e32:	c0 80       	ld	r12, Z
    2e34:	d1 80       	ldd	r13, Z+1	; 0x01
    2e36:	f6 fc       	sbrc	r15, 6
    2e38:	03 c0       	rjmp	.+6      	; 0x2e40 <vfprintf+0x176>
    2e3a:	6f ef       	ldi	r22, 0xFF	; 255
    2e3c:	7f ef       	ldi	r23, 0xFF	; 255
    2e3e:	02 c0       	rjmp	.+4      	; 0x2e44 <vfprintf+0x17a>
    2e40:	69 2d       	mov	r22, r9
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	42 e0       	ldi	r20, 0x02	; 2
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	a4 0e       	add	r10, r20
    2e4a:	b5 1e       	adc	r11, r21
    2e4c:	c6 01       	movw	r24, r12
    2e4e:	0e 94 42 18 	call	0x3084	; 0x3084 <strnlen_P>
    2e52:	8c 01       	movw	r16, r24
    2e54:	50 e8       	ldi	r21, 0x80	; 128
    2e56:	f5 2a       	or	r15, r21
    2e58:	f3 fe       	sbrs	r15, 3
    2e5a:	07 c0       	rjmp	.+14     	; 0x2e6a <vfprintf+0x1a0>
    2e5c:	1a c0       	rjmp	.+52     	; 0x2e92 <vfprintf+0x1c8>
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	b3 01       	movw	r22, r6
    2e64:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    2e68:	ea 94       	dec	r14
    2e6a:	8e 2d       	mov	r24, r14
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	08 17       	cp	r16, r24
    2e70:	19 07       	cpc	r17, r25
    2e72:	a8 f3       	brcs	.-22     	; 0x2e5e <vfprintf+0x194>
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <vfprintf+0x1c8>
    2e76:	f6 01       	movw	r30, r12
    2e78:	f7 fc       	sbrc	r15, 7
    2e7a:	85 91       	lpm	r24, Z+
    2e7c:	f7 fe       	sbrs	r15, 7
    2e7e:	81 91       	ld	r24, Z+
    2e80:	6f 01       	movw	r12, r30
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	b3 01       	movw	r22, r6
    2e86:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    2e8a:	e1 10       	cpse	r14, r1
    2e8c:	ea 94       	dec	r14
    2e8e:	01 50       	subi	r16, 0x01	; 1
    2e90:	10 40       	sbci	r17, 0x00	; 0
    2e92:	01 15       	cp	r16, r1
    2e94:	11 05       	cpc	r17, r1
    2e96:	79 f7       	brne	.-34     	; 0x2e76 <vfprintf+0x1ac>
    2e98:	ea c0       	rjmp	.+468    	; 0x306e <vfprintf+0x3a4>
    2e9a:	94 36       	cpi	r25, 0x64	; 100
    2e9c:	11 f0       	breq	.+4      	; 0x2ea2 <vfprintf+0x1d8>
    2e9e:	99 36       	cpi	r25, 0x69	; 105
    2ea0:	69 f5       	brne	.+90     	; 0x2efc <vfprintf+0x232>
    2ea2:	f7 fe       	sbrs	r15, 7
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <vfprintf+0x1ec>
    2ea6:	f5 01       	movw	r30, r10
    2ea8:	20 81       	ld	r18, Z
    2eaa:	31 81       	ldd	r19, Z+1	; 0x01
    2eac:	42 81       	ldd	r20, Z+2	; 0x02
    2eae:	53 81       	ldd	r21, Z+3	; 0x03
    2eb0:	84 e0       	ldi	r24, 0x04	; 4
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0a c0       	rjmp	.+20     	; 0x2eca <vfprintf+0x200>
    2eb6:	f5 01       	movw	r30, r10
    2eb8:	80 81       	ld	r24, Z
    2eba:	91 81       	ldd	r25, Z+1	; 0x01
    2ebc:	9c 01       	movw	r18, r24
    2ebe:	44 27       	eor	r20, r20
    2ec0:	37 fd       	sbrc	r19, 7
    2ec2:	40 95       	com	r20
    2ec4:	54 2f       	mov	r21, r20
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a8 0e       	add	r10, r24
    2ecc:	b9 1e       	adc	r11, r25
    2ece:	9f e6       	ldi	r25, 0x6F	; 111
    2ed0:	f9 22       	and	r15, r25
    2ed2:	57 ff       	sbrs	r21, 7
    2ed4:	09 c0       	rjmp	.+18     	; 0x2ee8 <vfprintf+0x21e>
    2ed6:	50 95       	com	r21
    2ed8:	40 95       	com	r20
    2eda:	30 95       	com	r19
    2edc:	21 95       	neg	r18
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee4:	e0 e8       	ldi	r30, 0x80	; 128
    2ee6:	fe 2a       	or	r15, r30
    2ee8:	ca 01       	movw	r24, r20
    2eea:	b9 01       	movw	r22, r18
    2eec:	a1 01       	movw	r20, r2
    2eee:	2a e0       	ldi	r18, 0x0A	; 10
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	0e 94 84 18 	call	0x3108	; 0x3108 <__ultoa_invert>
    2ef6:	d8 2e       	mov	r13, r24
    2ef8:	d2 18       	sub	r13, r2
    2efa:	40 c0       	rjmp	.+128    	; 0x2f7c <vfprintf+0x2b2>
    2efc:	95 37       	cpi	r25, 0x75	; 117
    2efe:	29 f4       	brne	.+10     	; 0x2f0a <vfprintf+0x240>
    2f00:	1f 2d       	mov	r17, r15
    2f02:	1f 7e       	andi	r17, 0xEF	; 239
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	1d c0       	rjmp	.+58     	; 0x2f44 <vfprintf+0x27a>
    2f0a:	1f 2d       	mov	r17, r15
    2f0c:	19 7f       	andi	r17, 0xF9	; 249
    2f0e:	9f 36       	cpi	r25, 0x6F	; 111
    2f10:	61 f0       	breq	.+24     	; 0x2f2a <vfprintf+0x260>
    2f12:	90 37       	cpi	r25, 0x70	; 112
    2f14:	20 f4       	brcc	.+8      	; 0x2f1e <vfprintf+0x254>
    2f16:	98 35       	cpi	r25, 0x58	; 88
    2f18:	09 f0       	breq	.+2      	; 0x2f1c <vfprintf+0x252>
    2f1a:	ac c0       	rjmp	.+344    	; 0x3074 <vfprintf+0x3aa>
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <vfprintf+0x272>
    2f1e:	90 37       	cpi	r25, 0x70	; 112
    2f20:	39 f0       	breq	.+14     	; 0x2f30 <vfprintf+0x266>
    2f22:	98 37       	cpi	r25, 0x78	; 120
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <vfprintf+0x25e>
    2f26:	a6 c0       	rjmp	.+332    	; 0x3074 <vfprintf+0x3aa>
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <vfprintf+0x268>
    2f2a:	28 e0       	ldi	r18, 0x08	; 8
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	0a c0       	rjmp	.+20     	; 0x2f44 <vfprintf+0x27a>
    2f30:	10 61       	ori	r17, 0x10	; 16
    2f32:	14 fd       	sbrc	r17, 4
    2f34:	14 60       	ori	r17, 0x04	; 4
    2f36:	20 e1       	ldi	r18, 0x10	; 16
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	04 c0       	rjmp	.+8      	; 0x2f44 <vfprintf+0x27a>
    2f3c:	14 fd       	sbrc	r17, 4
    2f3e:	16 60       	ori	r17, 0x06	; 6
    2f40:	20 e1       	ldi	r18, 0x10	; 16
    2f42:	32 e0       	ldi	r19, 0x02	; 2
    2f44:	17 ff       	sbrs	r17, 7
    2f46:	08 c0       	rjmp	.+16     	; 0x2f58 <vfprintf+0x28e>
    2f48:	f5 01       	movw	r30, r10
    2f4a:	60 81       	ld	r22, Z
    2f4c:	71 81       	ldd	r23, Z+1	; 0x01
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	44 e0       	ldi	r20, 0x04	; 4
    2f54:	50 e0       	ldi	r21, 0x00	; 0
    2f56:	08 c0       	rjmp	.+16     	; 0x2f68 <vfprintf+0x29e>
    2f58:	f5 01       	movw	r30, r10
    2f5a:	80 81       	ld	r24, Z
    2f5c:	91 81       	ldd	r25, Z+1	; 0x01
    2f5e:	bc 01       	movw	r22, r24
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	42 e0       	ldi	r20, 0x02	; 2
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	a4 0e       	add	r10, r20
    2f6a:	b5 1e       	adc	r11, r21
    2f6c:	a1 01       	movw	r20, r2
    2f6e:	0e 94 84 18 	call	0x3108	; 0x3108 <__ultoa_invert>
    2f72:	d8 2e       	mov	r13, r24
    2f74:	d2 18       	sub	r13, r2
    2f76:	8f e7       	ldi	r24, 0x7F	; 127
    2f78:	f8 2e       	mov	r15, r24
    2f7a:	f1 22       	and	r15, r17
    2f7c:	f6 fe       	sbrs	r15, 6
    2f7e:	0b c0       	rjmp	.+22     	; 0x2f96 <vfprintf+0x2cc>
    2f80:	5e ef       	ldi	r21, 0xFE	; 254
    2f82:	f5 22       	and	r15, r21
    2f84:	d9 14       	cp	r13, r9
    2f86:	38 f4       	brcc	.+14     	; 0x2f96 <vfprintf+0x2cc>
    2f88:	f4 fe       	sbrs	r15, 4
    2f8a:	07 c0       	rjmp	.+14     	; 0x2f9a <vfprintf+0x2d0>
    2f8c:	f2 fc       	sbrc	r15, 2
    2f8e:	05 c0       	rjmp	.+10     	; 0x2f9a <vfprintf+0x2d0>
    2f90:	8f ee       	ldi	r24, 0xEF	; 239
    2f92:	f8 22       	and	r15, r24
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <vfprintf+0x2d0>
    2f96:	1d 2d       	mov	r17, r13
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <vfprintf+0x2d2>
    2f9a:	19 2d       	mov	r17, r9
    2f9c:	f4 fe       	sbrs	r15, 4
    2f9e:	0d c0       	rjmp	.+26     	; 0x2fba <vfprintf+0x2f0>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ed 0d       	add	r30, r13
    2fa4:	f1 1d       	adc	r31, r1
    2fa6:	80 81       	ld	r24, Z
    2fa8:	80 33       	cpi	r24, 0x30	; 48
    2faa:	19 f4       	brne	.+6      	; 0x2fb2 <vfprintf+0x2e8>
    2fac:	99 ee       	ldi	r25, 0xE9	; 233
    2fae:	f9 22       	and	r15, r25
    2fb0:	08 c0       	rjmp	.+16     	; 0x2fc2 <vfprintf+0x2f8>
    2fb2:	1f 5f       	subi	r17, 0xFF	; 255
    2fb4:	f2 fe       	sbrs	r15, 2
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <vfprintf+0x2f8>
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <vfprintf+0x2f6>
    2fba:	8f 2d       	mov	r24, r15
    2fbc:	86 78       	andi	r24, 0x86	; 134
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <vfprintf+0x2f8>
    2fc0:	1f 5f       	subi	r17, 0xFF	; 255
    2fc2:	0f 2d       	mov	r16, r15
    2fc4:	f3 fc       	sbrc	r15, 3
    2fc6:	14 c0       	rjmp	.+40     	; 0x2ff0 <vfprintf+0x326>
    2fc8:	f0 fe       	sbrs	r15, 0
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <vfprintf+0x320>
    2fcc:	1e 15       	cp	r17, r14
    2fce:	10 f0       	brcs	.+4      	; 0x2fd4 <vfprintf+0x30a>
    2fd0:	9d 2c       	mov	r9, r13
    2fd2:	0b c0       	rjmp	.+22     	; 0x2fea <vfprintf+0x320>
    2fd4:	9d 2c       	mov	r9, r13
    2fd6:	9e 0c       	add	r9, r14
    2fd8:	91 1a       	sub	r9, r17
    2fda:	1e 2d       	mov	r17, r14
    2fdc:	06 c0       	rjmp	.+12     	; 0x2fea <vfprintf+0x320>
    2fde:	80 e2       	ldi	r24, 0x20	; 32
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	b3 01       	movw	r22, r6
    2fe4:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    2fe8:	1f 5f       	subi	r17, 0xFF	; 255
    2fea:	1e 15       	cp	r17, r14
    2fec:	c0 f3       	brcs	.-16     	; 0x2fde <vfprintf+0x314>
    2fee:	04 c0       	rjmp	.+8      	; 0x2ff8 <vfprintf+0x32e>
    2ff0:	1e 15       	cp	r17, r14
    2ff2:	10 f4       	brcc	.+4      	; 0x2ff8 <vfprintf+0x32e>
    2ff4:	e1 1a       	sub	r14, r17
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <vfprintf+0x330>
    2ff8:	ee 24       	eor	r14, r14
    2ffa:	04 ff       	sbrs	r16, 4
    2ffc:	0f c0       	rjmp	.+30     	; 0x301c <vfprintf+0x352>
    2ffe:	80 e3       	ldi	r24, 0x30	; 48
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	b3 01       	movw	r22, r6
    3004:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    3008:	02 ff       	sbrs	r16, 2
    300a:	1d c0       	rjmp	.+58     	; 0x3046 <vfprintf+0x37c>
    300c:	01 fd       	sbrc	r16, 1
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <vfprintf+0x34c>
    3010:	88 e7       	ldi	r24, 0x78	; 120
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	0e c0       	rjmp	.+28     	; 0x3032 <vfprintf+0x368>
    3016:	88 e5       	ldi	r24, 0x58	; 88
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0b c0       	rjmp	.+22     	; 0x3032 <vfprintf+0x368>
    301c:	80 2f       	mov	r24, r16
    301e:	86 78       	andi	r24, 0x86	; 134
    3020:	91 f0       	breq	.+36     	; 0x3046 <vfprintf+0x37c>
    3022:	01 ff       	sbrs	r16, 1
    3024:	02 c0       	rjmp	.+4      	; 0x302a <vfprintf+0x360>
    3026:	8b e2       	ldi	r24, 0x2B	; 43
    3028:	01 c0       	rjmp	.+2      	; 0x302c <vfprintf+0x362>
    302a:	80 e2       	ldi	r24, 0x20	; 32
    302c:	f7 fc       	sbrc	r15, 7
    302e:	8d e2       	ldi	r24, 0x2D	; 45
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	b3 01       	movw	r22, r6
    3034:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <vfprintf+0x37c>
    303a:	80 e3       	ldi	r24, 0x30	; 48
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	b3 01       	movw	r22, r6
    3040:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    3044:	9a 94       	dec	r9
    3046:	d9 14       	cp	r13, r9
    3048:	c0 f3       	brcs	.-16     	; 0x303a <vfprintf+0x370>
    304a:	da 94       	dec	r13
    304c:	f1 01       	movw	r30, r2
    304e:	ed 0d       	add	r30, r13
    3050:	f1 1d       	adc	r31, r1
    3052:	80 81       	ld	r24, Z
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	b3 01       	movw	r22, r6
    3058:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    305c:	dd 20       	and	r13, r13
    305e:	a9 f7       	brne	.-22     	; 0x304a <vfprintf+0x380>
    3060:	06 c0       	rjmp	.+12     	; 0x306e <vfprintf+0x3a4>
    3062:	80 e2       	ldi	r24, 0x20	; 32
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	b3 01       	movw	r22, r6
    3068:	0e 94 58 18 	call	0x30b0	; 0x30b0 <fputc>
    306c:	ea 94       	dec	r14
    306e:	ee 20       	and	r14, r14
    3070:	c1 f7       	brne	.-16     	; 0x3062 <vfprintf+0x398>
    3072:	43 ce       	rjmp	.-890    	; 0x2cfa <vfprintf+0x30>
    3074:	f3 01       	movw	r30, r6
    3076:	66 81       	ldd	r22, Z+6	; 0x06
    3078:	77 81       	ldd	r23, Z+7	; 0x07
    307a:	cb 01       	movw	r24, r22
    307c:	2b 96       	adiw	r28, 0x0b	; 11
    307e:	e2 e1       	ldi	r30, 0x12	; 18
    3080:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__epilogue_restores__>

00003084 <strnlen_P>:
    3084:	fc 01       	movw	r30, r24
    3086:	05 90       	lpm	r0, Z+
    3088:	61 50       	subi	r22, 0x01	; 1
    308a:	70 40       	sbci	r23, 0x00	; 0
    308c:	01 10       	cpse	r0, r1
    308e:	d8 f7       	brcc	.-10     	; 0x3086 <strnlen_P+0x2>
    3090:	80 95       	com	r24
    3092:	90 95       	com	r25
    3094:	8e 0f       	add	r24, r30
    3096:	9f 1f       	adc	r25, r31
    3098:	08 95       	ret

0000309a <strnlen>:
    309a:	fc 01       	movw	r30, r24
    309c:	61 50       	subi	r22, 0x01	; 1
    309e:	70 40       	sbci	r23, 0x00	; 0
    30a0:	01 90       	ld	r0, Z+
    30a2:	01 10       	cpse	r0, r1
    30a4:	d8 f7       	brcc	.-10     	; 0x309c <strnlen+0x2>
    30a6:	80 95       	com	r24
    30a8:	90 95       	com	r25
    30aa:	8e 0f       	add	r24, r30
    30ac:	9f 1f       	adc	r25, r31
    30ae:	08 95       	ret

000030b0 <fputc>:
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	8c 01       	movw	r16, r24
    30ba:	eb 01       	movw	r28, r22
    30bc:	8b 81       	ldd	r24, Y+3	; 0x03
    30be:	81 ff       	sbrs	r24, 1
    30c0:	1b c0       	rjmp	.+54     	; 0x30f8 <fputc+0x48>
    30c2:	82 ff       	sbrs	r24, 2
    30c4:	0d c0       	rjmp	.+26     	; 0x30e0 <fputc+0x30>
    30c6:	2e 81       	ldd	r18, Y+6	; 0x06
    30c8:	3f 81       	ldd	r19, Y+7	; 0x07
    30ca:	8c 81       	ldd	r24, Y+4	; 0x04
    30cc:	9d 81       	ldd	r25, Y+5	; 0x05
    30ce:	28 17       	cp	r18, r24
    30d0:	39 07       	cpc	r19, r25
    30d2:	64 f4       	brge	.+24     	; 0x30ec <fputc+0x3c>
    30d4:	e8 81       	ld	r30, Y
    30d6:	f9 81       	ldd	r31, Y+1	; 0x01
    30d8:	01 93       	st	Z+, r16
    30da:	f9 83       	std	Y+1, r31	; 0x01
    30dc:	e8 83       	st	Y, r30
    30de:	06 c0       	rjmp	.+12     	; 0x30ec <fputc+0x3c>
    30e0:	e8 85       	ldd	r30, Y+8	; 0x08
    30e2:	f9 85       	ldd	r31, Y+9	; 0x09
    30e4:	80 2f       	mov	r24, r16
    30e6:	09 95       	icall
    30e8:	89 2b       	or	r24, r25
    30ea:	31 f4       	brne	.+12     	; 0x30f8 <fputc+0x48>
    30ec:	8e 81       	ldd	r24, Y+6	; 0x06
    30ee:	9f 81       	ldd	r25, Y+7	; 0x07
    30f0:	01 96       	adiw	r24, 0x01	; 1
    30f2:	9f 83       	std	Y+7, r25	; 0x07
    30f4:	8e 83       	std	Y+6, r24	; 0x06
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <fputc+0x4c>
    30f8:	0f ef       	ldi	r16, 0xFF	; 255
    30fa:	1f ef       	ldi	r17, 0xFF	; 255
    30fc:	c8 01       	movw	r24, r16
    30fe:	df 91       	pop	r29
    3100:	cf 91       	pop	r28
    3102:	1f 91       	pop	r17
    3104:	0f 91       	pop	r16
    3106:	08 95       	ret

00003108 <__ultoa_invert>:
    3108:	fa 01       	movw	r30, r20
    310a:	aa 27       	eor	r26, r26
    310c:	28 30       	cpi	r18, 0x08	; 8
    310e:	51 f1       	breq	.+84     	; 0x3164 <__ultoa_invert+0x5c>
    3110:	20 31       	cpi	r18, 0x10	; 16
    3112:	81 f1       	breq	.+96     	; 0x3174 <__ultoa_invert+0x6c>
    3114:	e8 94       	clt
    3116:	6f 93       	push	r22
    3118:	6e 7f       	andi	r22, 0xFE	; 254
    311a:	6e 5f       	subi	r22, 0xFE	; 254
    311c:	7f 4f       	sbci	r23, 0xFF	; 255
    311e:	8f 4f       	sbci	r24, 0xFF	; 255
    3120:	9f 4f       	sbci	r25, 0xFF	; 255
    3122:	af 4f       	sbci	r26, 0xFF	; 255
    3124:	b1 e0       	ldi	r27, 0x01	; 1
    3126:	3e d0       	rcall	.+124    	; 0x31a4 <__ultoa_invert+0x9c>
    3128:	b4 e0       	ldi	r27, 0x04	; 4
    312a:	3c d0       	rcall	.+120    	; 0x31a4 <__ultoa_invert+0x9c>
    312c:	67 0f       	add	r22, r23
    312e:	78 1f       	adc	r23, r24
    3130:	89 1f       	adc	r24, r25
    3132:	9a 1f       	adc	r25, r26
    3134:	a1 1d       	adc	r26, r1
    3136:	68 0f       	add	r22, r24
    3138:	79 1f       	adc	r23, r25
    313a:	8a 1f       	adc	r24, r26
    313c:	91 1d       	adc	r25, r1
    313e:	a1 1d       	adc	r26, r1
    3140:	6a 0f       	add	r22, r26
    3142:	71 1d       	adc	r23, r1
    3144:	81 1d       	adc	r24, r1
    3146:	91 1d       	adc	r25, r1
    3148:	a1 1d       	adc	r26, r1
    314a:	20 d0       	rcall	.+64     	; 0x318c <__ultoa_invert+0x84>
    314c:	09 f4       	brne	.+2      	; 0x3150 <__ultoa_invert+0x48>
    314e:	68 94       	set
    3150:	3f 91       	pop	r19
    3152:	2a e0       	ldi	r18, 0x0A	; 10
    3154:	26 9f       	mul	r18, r22
    3156:	11 24       	eor	r1, r1
    3158:	30 19       	sub	r19, r0
    315a:	30 5d       	subi	r19, 0xD0	; 208
    315c:	31 93       	st	Z+, r19
    315e:	de f6       	brtc	.-74     	; 0x3116 <__ultoa_invert+0xe>
    3160:	cf 01       	movw	r24, r30
    3162:	08 95       	ret
    3164:	46 2f       	mov	r20, r22
    3166:	47 70       	andi	r20, 0x07	; 7
    3168:	40 5d       	subi	r20, 0xD0	; 208
    316a:	41 93       	st	Z+, r20
    316c:	b3 e0       	ldi	r27, 0x03	; 3
    316e:	0f d0       	rcall	.+30     	; 0x318e <__ultoa_invert+0x86>
    3170:	c9 f7       	brne	.-14     	; 0x3164 <__ultoa_invert+0x5c>
    3172:	f6 cf       	rjmp	.-20     	; 0x3160 <__ultoa_invert+0x58>
    3174:	46 2f       	mov	r20, r22
    3176:	4f 70       	andi	r20, 0x0F	; 15
    3178:	40 5d       	subi	r20, 0xD0	; 208
    317a:	4a 33       	cpi	r20, 0x3A	; 58
    317c:	18 f0       	brcs	.+6      	; 0x3184 <__ultoa_invert+0x7c>
    317e:	49 5d       	subi	r20, 0xD9	; 217
    3180:	31 fd       	sbrc	r19, 1
    3182:	40 52       	subi	r20, 0x20	; 32
    3184:	41 93       	st	Z+, r20
    3186:	02 d0       	rcall	.+4      	; 0x318c <__ultoa_invert+0x84>
    3188:	a9 f7       	brne	.-22     	; 0x3174 <__ultoa_invert+0x6c>
    318a:	ea cf       	rjmp	.-44     	; 0x3160 <__ultoa_invert+0x58>
    318c:	b4 e0       	ldi	r27, 0x04	; 4
    318e:	a6 95       	lsr	r26
    3190:	97 95       	ror	r25
    3192:	87 95       	ror	r24
    3194:	77 95       	ror	r23
    3196:	67 95       	ror	r22
    3198:	ba 95       	dec	r27
    319a:	c9 f7       	brne	.-14     	; 0x318e <__ultoa_invert+0x86>
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	61 05       	cpc	r22, r1
    31a0:	71 05       	cpc	r23, r1
    31a2:	08 95       	ret
    31a4:	9b 01       	movw	r18, r22
    31a6:	ac 01       	movw	r20, r24
    31a8:	0a 2e       	mov	r0, r26
    31aa:	06 94       	lsr	r0
    31ac:	57 95       	ror	r21
    31ae:	47 95       	ror	r20
    31b0:	37 95       	ror	r19
    31b2:	27 95       	ror	r18
    31b4:	ba 95       	dec	r27
    31b6:	c9 f7       	brne	.-14     	; 0x31aa <__ultoa_invert+0xa2>
    31b8:	62 0f       	add	r22, r18
    31ba:	73 1f       	adc	r23, r19
    31bc:	84 1f       	adc	r24, r20
    31be:	95 1f       	adc	r25, r21
    31c0:	a0 1d       	adc	r26, r0
    31c2:	08 95       	ret

000031c4 <_exit>:
    31c4:	f8 94       	cli

000031c6 <__stop_program>:
    31c6:	ff cf       	rjmp	.-2      	; 0x31c6 <__stop_program>
